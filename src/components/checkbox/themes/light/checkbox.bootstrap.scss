@use 'sass:map';
@use '../../../../styles/common/component';
@use '../../../../styles/utilities' as *;
@use '../../../../styles/themes/schemas/bootstrap/light' as *;

$schema: map.get($light-bootstrap-schema, 'checkbox');
$border-radius: border-radius(map.get($schema, 'border-radius')...);
$ripple-radius: border-radius(map.get($schema, 'border-radius-ripple')...);
$theme: digest-schema(extend(
    $schema,
    (
        border-radius: $border-radius,
        ripple-radius: $ripple-radius
    )
));

:host {
    @include css-vars-from-theme($theme, 'ig-checkbox');
}

[part~='control'] {
    --size: #{rem(16px)};

    border-radius: var-get($theme, 'ripple-radius');
    width: var(--size);
    height: var(--size);
    min-width: var(--size);
    transition: background-color .15s ease-in-out;

    // Removing visual artifacts, to understand the problem see
    // https://stackoverflow.com/questions/69658462/inset-box-shadow-visual-artifacts-in-google-chrome
    transform: translate3d(0, 0, 0);

    &::after {
        border-radius: var-get($theme, 'border-radius');
        width: inherit;
        height: inherit;
        min-width: inherit;
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'empty-color');
        transition: none;
    }
}

[part~='indicator'] {
    stroke-width: 3;
    transform: scale(.7);
    transition: none;
    stroke: white;
}

[part~='label'] {
    @include type-style('body-2');

    transition: none;
    color: var-get($theme, 'label-color');
}

[part='control checked']::after {
    background: var-get($theme, 'fill-color');
    box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
}

:host([indeterminate]) {
    [part~='control']::after {
        background: var-get($theme, 'fill-color');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }

    [part~='indicator'] {
        stroke-dashoffset: 41;
        opacity: 1;
        transform: rotate(45deg) translateX(-.075rem) scale(.7);
    }
}

:host(:not([disabled])[invalid]) {
    [part~='label'] {
        color: var-get($theme, 'error-color');
    }

    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'error-color');
            border-color: var-get($theme, 'error-color');
        }
    }

    [part='control checked'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'error-color');
            background: var-get($theme, 'error-color');
        }
    }

    &:focus-within {
        [part~='control'],
        [part='control checked'] {
            box-shadow: 0 0 0 rem(4px) var-get($theme, 'error-color');
        }
    }
}

:host(:not([disabled])[invalid][indeterminate]) {
    [part~='control'] {
        &::after {
            background: var-get($theme, 'error-color');
        }
    }
}

:host(:focus-within) [part~='control'],
[part~='focused'] [part~='control'] {
    box-shadow: 0 0 0 rem(4px) var-get($theme, 'focus-outline-color');

    &::after {
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }
}

:host(:focus-within:not([disabled])[invalid]) [part~='control'],
:host(:not([disabled])[invalid]) [part~='focused'] [part~='control'] {
    box-shadow: 0 0 0 rem(4px) var-get($theme, 'error-color-hover');
}

:host([disabled]) {
    [part~='label'] {
        color: var-get($theme, 'disabled-color-label');
    }

    [part='control checked']::after {
        background: var-get($theme, 'disabled-color');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'disabled-color');
    }
}

:host([disabled][indeterminate]) {
    [part='control']::after {
        background: var-get($theme, 'disabled-color');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'disabled-color');
    }
}
