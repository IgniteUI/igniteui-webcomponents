@use 'styles/utilities' as *;
@use '../light/themes' as *;

$theme: $fluent;

:host {
    --component-size: var(--ig-size, #{var-get($theme, 'default-size')});
    --input-size: var(--component-size);
    --helper-text-top-spacer: rem(5px);
    --input-border-size: #{rem(1px)};

    [part='prefix'],
    [part='suffix'] {
        font-size: rem(14px);
        cursor: default;
        z-index: 0;

        ::slotted(*) {
            color: inherit;
        }
    }

    ::part(helper-text) {
        @include type-style('caption');

        color: var-get($theme, 'helper-text-color');
        margin-block-start: rem(5px);
        grid-auto-rows: minmax(rem(18px), auto);
    }

    [name='prefix']::slotted(*),
    [name='suffix']::slotted(*) {
        display: inline-flex;
        align-items: center;
        width: max-content;
        height: 100%;
        padding-inline: pad-inline(8px, 12px, 16px);
    }

    [part='prefix'] {
        grid-area: 1 / 1;
    }

    [part='suffix'] {
        grid-area: 1 / 3;
    }

    [part='label'] {
        @include type-style('subtitle-2') {
            --ig-subtitle-2-line-height: #{rem(16px)};

            margin-block: 0 rem(5px);
        };

        color: var-get($theme, 'idle-secondary-color');
    }

    [part^='container'] {
        height: var-get($theme, 'size');
        background: var-get($theme, 'border-background');
        border: var(--input-border-size) solid transparent;
        border-radius: var-get($theme, 'border-border-radius');
        transition: none;
        cursor: text;
        grid-template-columns: auto 1fr auto;

        &::before {
            content: '';
            position: absolute;
            inset: calc(var(--input-border-size) * -1);
            width: calc(100% + (var(--input-border-size) * 2));
            height: calc(100% + (var(--input-border-size) * 2));

            // The color: here is the actual box-shadow color. If we don't provide color-value to the shadow it
            // defaults to the css color: prop the same way as border-color: do.
            // We do this in order to have the shadow working correctly inside the Combo search
            // We can't change the var-get($theme, 'border-color') in the combo search, but we can change the shadow
            color: var-get($theme, 'border-color');
            box-shadow: inset 0 0 0 var(--input-border-size);
            border-radius: var-get($theme, 'border-border-radius');
            user-select: none;
            pointer-events: none;
            z-index: 1;
        }
    }

    [part~='input'] {
        color: var-get($theme, 'idle-text-color');
        background: initial;
        font-size: rem(14px);
        padding-inline: rem(8px);
        max-height: 100%;
        border: none;
        grid-area: 1 / 2;
    }
}

:host(:not([readonly], [invalid], :focus-within):hover) {
    [part^='container'] {
        &::before {
            // The color: here is the actual box-shadow color. If we don't provide color-value to the shadow it
            // defaults to the css color: prop the same way as border-color: do.
            // We do this in order to have the shadow working correctly inside the Combo search
            // We can't change the var-get($theme, 'hover-border-color') in the combo search, but we can change the shadow
            color: var-get($theme, 'hover-border-color');
            box-shadow: inset 0 0 0 var(--input-border-size);
        }
    }
}

:host([aria-expanded][readonly]:not([invalid], :focus-within):hover) {
    [part^='container'] {
        &::before {
            // The color: here is the actual box-shadow color. If we don't provide color-value to the shadow it
            // defaults to the css color: prop the same way as border-color: do.
            // We do this in order to have the shadow working correctly inside the Combo search
            // We can't change the var-get($theme, 'hover-border-color') in the combo search, but we can change the shadow
            color: var-get($theme, 'hover-border-color');
            box-shadow: inset 0 0 0 var(--input-border-size);
        }
    }
}

:host([aria-haspopup]:not([readonly], [invalid], :focus-within):hover) {
    [part^='container'] {
        &::before {
            color: var-get($theme, 'hover-border-color');
            box-shadow: inset 0 0 0 var(--input-border-size);
        }
    }
}


:host(:focus-within) {
    [part^='container'] {
        &::before {
            // The color: here is the actual box-shadow color. If we don't provide color-value to the shadow it
            // defaults to the css color: prop the same way as border-color: do.
            // We do this in order to have the shadow working correctly inside the Combo search
            // We can't change the var-get($theme, 'focused-border-color') in the combo search, but we can change the shadow
            color: var-get($theme, 'focused-border-color');
            box-shadow: inset 0 0 0 calc(var(--input-border-size) + #{rem(1px)});
        }
    }

    [name='prefix']::slotted(*),
    [name='suffix']::slotted(*) {
        padding-block: pad-block(6px, 8px, 10px);
    }
}

:host([type='search']) {
    [part='prefix'] {
        background: var(--ig-input-group-input-prefix-background, transparent);
        color: var(--ig-input-group-input-prefix-color, var(--ig-primary-500));
    }

    [part='suffix'] {
        background: var(--ig-input-group-input-suffix-background, transparent);
        color: var(--ig-input-group-input-suffix-color, var(--ig-primary-500));
    }
}

:host([type='search']:focus-within) {
    [part='prefix'] {
        display: none;
    }

    [part='suffix'] {
        color: var(--ig-input-group-input-suffix-color--focused, var(--ig-gray-900));
    }
}

:host([readonly][type='search']:focus-within) {
    [part='suffix'] {
        color: var-get($theme, 'disabled-text-color');
    }
}

:host([required]) {
    [part='label']::after {
        color: var-get($theme, 'error-secondary-color');
    }
}

:host([invalid]),
:host([invalid]:hover),
:host([readonly][invalid]:hover),
:host([readonly][invalid]:focus-within) {
    ::part(helper-text) {
        color: var-get($theme, 'error-secondary-color');
    }

    [part~='container'] {
        &::before {
            box-shadow: inset 0 0 0 var(--input-border-size) var-get($theme, 'error-secondary-color');
        }
    }
}

:host([readonly]) {
    [part='prefix'],
    [part='suffix'] {
        background: transparent;
    }
}

:host([invalid]:focus-within),
:host([readonly][invalid]:focus-within) {
    [part~='container'] {
        &::before {
            box-shadow: inset 0 0 0 calc(var(--input-border-size) + #{rem(1px)}) var-get($theme, 'error-secondary-color');
        }
    }
}

:host(:disabled),
:host([disabled]) {
    [part~='container'] {
        &::before {
            box-shadow: inset 0 0 0 var(--input-border-size) var-get($theme, 'disabled-border-color');
        }
    }

    [part^='container'],
    [part='prefix'],
    [part='suffix'] {
        background: var-get($theme, 'border-disabled-background');
    }

    [part='prefix'],
    [part='suffix'],
    [part='label'],
    [part='label']::after,
    [part~='input'],
    ::part(helper-text) {
        color: var-get($theme, 'disabled-text-color');
    }
}
