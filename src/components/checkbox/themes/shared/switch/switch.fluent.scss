@use 'styles/utilities' as *;
@use '../../light/switch/themes' as *;

$theme: $fluent;

:host {
    --size: #{rem(40px)};
    --thumb-size: #{rem(12px)};
    --border-size: #{rem(2px)};
    --thumb-offset: calc(var(--thumb-size) / 2 - #{rem(3px)});
    --label-gap: #{rem(8px)};
}

[part~='control'] {
    border-radius: var-get($theme, 'border-radius-track');
    width: var(--size);
    height: rem(20px);
    background: var-get($theme, 'track-off-color');
    border: rem(1px) solid var-get($theme, 'border-color');
}

[part~='control'][part~='checked'] {
    background: var-get($theme, 'track-on-color');
    border-color: var-get($theme, 'border-on-color');
}

[part~='thumb'] {
    border-radius: var-get($theme, 'border-radius-thumb');
    width: var(--thumb-size);
    height: var(--thumb-size);
    min-width: var(--thumb-size);
    margin-inline-start: var(--thumb-offset);
    background: var-get($theme, 'thumb-off-color');
}

[part~='thumb'][part~='checked'] {
    margin-inline-start: calc(100% - var(--thumb-size) - var(--thumb-offset));
    background: var-get($theme, 'thumb-on-color')
}

[part~='label'] {
    @include type-style('body-2');
}

[part~='focused'] {
    position: relative;

    $focus-outline-offset-top: rem(3px);
    $focus-outline-offset-left: rem(3px);

    &::after {
        content: '';
        position: absolute;
        top: -$focus-outline-offset-top;
        left: -$focus-outline-offset-left;
        box-shadow: 0 0 0 rem(1px) var-get($theme, 'focus-outline-color');
        width: calc(100% + (#{$focus-outline-offset-left} * 2));
        height: calc(100% + (#{$focus-outline-offset-top} * 2));
    }
}

:host(:not([disabled]):hover),
:host(:not(:disabled):hover)  {
    [part~='control'] {
        border-color: var-get($theme, 'border-hover-color');
    }

    [part~='control'][part~='checked'] {
        background: var-get($theme, 'track-on-hover-color');
        border-color: var-get($theme, 'border-on-hover-color');
    }

    [part~='thumb'] {
        background: var-get($theme, 'border-hover-color');
    }

    [part~='thumb'][part~='checked'] {
        background: var-get($theme, 'thumb-on-color');
    }
}

:host(:not([disabled])[invalid]),
:host(:not(:disabled)[invalid]) {
    [part~='control'][part~='checked'] {
        background: var-get($theme, 'track-error-color');
    }

    [part~='control'],
    [part~='control'][part~='checked'] {
        border-color: var-get($theme, 'error-color');
    }

    [part~='thumb'] {
        background: var-get($theme, 'error-color');
    }

    [part~='control'][part~='focused'],
    [part~='control'][part~='checked'][part~='focused'] {
        box-shadow: 0 0 0 rem(2px) var-get($theme, 'error-color-hover');
    }

    [part~='thumb'][part~='checked'] {
        background: var-get($theme, 'thumb-on-error-color');
    }
}
