@use 'sass:map';
@use '../../../../styles/common/component';
@use '../../../../styles/utilities' as *;
@use '../../../../styles/themes/schemas/indigo/light' as *;

$schema: map.get($light-indigo-schema, 'switch');
$border-radius-thumb: border-radius(map.get($schema, 'border-radius-thumb')...);
$border-radius-track: border-radius(map.get($schema, 'border-radius-track')...);
$theme: digest-schema(extend(
    $schema,
    (
        border-radius-thumb: $border-radius-thumb,
        border-radius-track: $border-radius-track
    )
));
$checked-color: var-get($theme, 'track-on-color') !default;
$border-width: rem(1px);

:host {
    --size: #{rem(34px)};
    --thumb-size: #{rem(8px)};
    --border-size: #{rem(1px)};
    --thumb-offset: #{rem(2px)};
    --label-gap: #{rem(8px)};

    @include css-vars-from-theme($theme, 'ig-switch');

    font-weight: 600;
}

[part~='base'] {
    &:hover {
        [part~='control'][part~='checked'] {
            border-color: var-get($theme, 'border-on-hover-color');
        }
    }
}

[part~='control'][part~='focused'] {
    box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color');
}

[part~='control'][part~='checked'][part~='focused'] {
    box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-focused');
}

[part~='control'] {
    border-radius: var-get($theme, 'border-radius-track');
    width: var(--size);
    height: rem(16px);
    border: rem(2px) solid var-get($theme, 'border-color');
    background: var-get($theme, 'track-off-color');
}

[part~='control'][part~='checked'] {
    border-color: var-get($theme, 'border-on-color');
    background: $checked-color;
}

[part~='thumb'] {
    border-radius: var-get($theme, 'border-radius-thumb');
    width: var(--thumb-size);
    height: var(--thumb-size);
    min-width: var(--thumb-size);
    background: var-get($theme, 'thumb-off-color');
}

[part~='thumb']:not([part~='checked']) {
    margin-inline-start: var(--thumb-offset);
}

[part~='thumb'][part~='checked'] {
    background: var-get($theme, 'thumb-on-color');
    margin-inline-start: calc(100% - var(--thumb-size) - var(--thumb-offset));
}

[part~='label'] {
    @include type-style('subtitle-1');

    color: var-get($theme, 'label-color');
    transition: all .2s ease-in-out;
}

:host(:not([disabled])[invalid]) {
    [part~='control'] {
        background: var-get($theme, 'track-error-color');
    }

    [part~='control'],
    [part~='control'][part~='checked'] {
        border-color: var-get($theme, 'error-color');
    }

    [part~='control'][part~='checked'],
    [part~='thumb'] {
        background: var-get($theme, 'error-color');
    }

    [part~='control'][part~='focused'],
    [part~='control'][part~='checked'][part~='focused'] {
        box-shadow: 0 0 0 rem(2px) var-get($theme, 'error-color-hover');
    }


    [part~='thumb'][part~='checked'] {
        background: var-get($theme, 'thumb-on-error-color');
    }

    [part~='label'] {
        color: var-get($theme, 'label-invalid-color');
    }
}

:host([disabled]){
    [part~='control'] {
        border-color: var-get($theme, 'border-disabled-color');
        background: var-get($theme, 'track-disabled-color');
    }

    [part~='control'][part~='checked'] {
        border-color: var-get($theme, 'border-disabled-color');
        background: var-get($theme, 'track-on-disabled-color');
    }

    [part~='thumb'] {
        background: var-get($theme, 'thumb-disabled-color');
    }

    [part~='thumb'][part~='checked'] {
        background: var-get($theme, 'thumb-on-disabled-color');
    }

    [part~='label'] {
        color: var-get($theme, 'label-disabled-color');
    }
}


