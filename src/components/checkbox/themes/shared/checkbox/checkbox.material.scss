@use 'styles/utilities' as *;
@use '../../light/checkbox/themes' as *;

$theme: $material;

:host {
    ::part(helper-text) {
        @include type-style('caption');

        margin-block-start: pad-block(rem(8px));
        grid-auto-rows: minmax(rem(18px), auto);
    }
}

:host(:not([disabled], :state(ig-invalid)):hover),
:host(:not([disabled], :state(ig-invalid))[indeterminate]:hover) {
    [part='control checked']::after {
        border-color: var-get($theme, 'fill-color-hover');
    }
}

[part~='label'] {
    @include type-style('subtitle-1');
}

[part~='control'] {
    // We expose that css variable to override the padding of
    // the checkbox control in components that we nest it in like List and Tree.
    padding: pad(var(--control-padding, rem(20px)));
    transition: background .15s ease-in;

    &::after {
        border-radius: var-get($theme, 'border-radius');
        border: rem(2px) solid var-get($theme, 'empty-color');
    }

    &::before {
        content: '';
        position: absolute;
        inset-block-start: 0;
        inset-inline-start: 0;
        width: 100%;
        height: 100%;
        border-radius: var-get($theme, 'border-radius-ripple');
    }
}

[part='control checked'] {
    &::after {
        border-color: var-get($theme, 'fill-color');
        background: var-get($theme, 'fill-color');
    }
}

[part~='base'] {
    gap: rem(2px);

    &:hover {
        [part~='control'] {
            &::before {
                background: var-get($theme, 'empty-color');
                opacity: .06;
            }
        }
    }
}

[part='base checked'] {
    &:hover {
        [part~='control'] {
            &::before {
                background: var-get($theme, 'fill-color-hover');
                opacity: .06;
            }
        }
    }
}

[part='base']:focus-visible,
[part='base focused'] {
    &:hover [part~='control'],
    [part~='control'] {
        &::before {
            background: var-get($theme, 'empty-color');
            opacity: .12;
        }
    }
}

[part='base checked']:focus-visible,
[part='base checked focused'] {
    &:hover [part~='control'],
    [part~='control'] {
        &::before {
            background: var-get($theme, 'fill-color');
            opacity: .12;
        }
    }

    &:hover [part~='control'] {
        &::before {
            background: var-get($theme, 'fill-color-hover');
        }
    }
}

:host([indeterminate]) {
    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'fill-color');
            background: var-get($theme, 'fill-color');
        }
    }

    [part='base']:focus-visible,
    [part='base focused'] {
        [part~='control']::before {
            background: var-get($theme, 'fill-color');
        }
    }
}

:host(:not([disabled], :state(ig-invalid))[indeterminate]:hover) {
    [part~='control']::after {
        background: var-get($theme, 'fill-color-hover');
        border-color: var-get($theme, 'fill-color-hover');
    }

    [part~='control']::before {
        background: var-get($theme, 'fill-color-hover');
    }
}

:host(:not([disabled]):state(ig-invalid)),
:host(:not(:disabled):state(ig-invalid)) {
    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'error-color');
        }
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'error-color');
        }
    }

    [part='base focused'] {
        [part~='control']::before {
            background: var-get($theme, 'error-color');
        }
    }

    [part='base checked']:focus-visible,
    [part='base checked focused'] {
        [part~='control']::before {
            background: var-get($theme, 'error-color');
            opacity: .12;
        }
    }
}

:host(:not([disabled]):state(ig-invalid):hover),
:host(:not(:disabled):state(ig-invalid):hover),
:host(:not([disabled]):state(ig-invalid)[indeterminate]:hover),
:host(:not(:disabled):state(ig-invalid)[indeterminate]:hover) {
    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'error-color-hover');
        }
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'error-color-hover');
        }
    }

    [part~='control']::before {
        background: var-get($theme, 'error-color-hover');
    }

    [part='base checked']:focus-visible,
    [part='base checked focused'] {
        [part~='control'] {
            &::before {
                background: var-get($theme, 'error-color-hover');
            }

            &::after {
                border-color: var-get($theme, 'error-color-hover');}
        }
    }
}

:host(:not([disabled]):state(ig-invalid)[indeterminate]),
:host(:not(:disabled):state(ig-invalid)[indeterminate]) {
    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'error-color');
            background: var-get($theme, 'error-color');
        }
    }

    [part~='base']:hover {
        [part~='control'] {
            &::after {
                border-color: var-get($theme, 'error-color-hover');
                background: var-get($theme, 'error-color-hover');
            }
        }
    }
}

:host([disabled]),
:host(:disabled) {
    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'disabled-color');
        }
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'disabled-color');
        }
    }
}

:host([disabled][indeterminate]),
:host(:disabled[indeterminate]) {
    [part~='control'] {
        &::after {
            background: var-get($theme, 'disabled-indeterminate-color');
            border-color: var-get($theme, 'disabled-indeterminate-color');
        }
    }
}
