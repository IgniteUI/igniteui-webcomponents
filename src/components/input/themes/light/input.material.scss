@use 'sass:map';
@use '../../../../styles/utilities' as *;
@use '../../../../styles/themes/schemas' as *;

$schema: map.get($light-material-schema, 'input-group');
$theme: digest-schema($schema);

$idle-color: color(gray, 500) !default;
$idle-hover-color: color(gray, 800) !default;
$hover-background: color(gray, 200) !default;
$focus-background: var(--focus-background, color(gray, 300)) !default;
$active-color: color(primary, 500) !default;
$error-color: color(error, 500) !default;
$idle-border-width: rem(1px) !default;
$active-border-width: rem(2px) !default;
$fs: rem(16px) !default;

%label {
    --label-position: #{sizable(18px, 22px, 26px)};

    transform: translateY(calc(var(--label-position) * -1));
    font-size: rem(12px);
}

%floated-styles {
    border-top: $idle-border-width solid transparent;
}

%suffix-preffix {
    display: inline-flex;
    align-items: center;
    width: max-content;
    height: 100%;
    padding-inline: pad-inline(rem(12px), rem(14px), rem(16px));
}

:host {
    input:placeholder-shown + [part='notch'],
    [part~='filled'] + [part='notch'] {
        @extend %floated-styles;
    }

    input::placeholder {
        color: color(gray, 700);
    }
}

input:placeholder-shown + [part='notch'] [part='label'],
[part~='filled'] + [part='notch'] [part='label'] {
    @extend %label;
}

[part~='input'] {
    background: transparent;
    padding: 0 rem(4px);
    font-size: rem(16px);
    grid-area: 1 / 2 / span 1 / span 2;
}

[part='label'] {
    color: color(gray, 700);
    transition:
        transform 150ms cubic-bezier(.4, 0, .2, 1),
        color 150ms cubic-bezier(.4, 0, .2, 1),
        font-size 150ms cubic-bezier(.4, 0, .2, 1);
    line-height: 1;
    text-overflow: ellipsis;
    overflow: hidden;
    will-change: font-size, color, transform;
}

:host(:focus-within) {
    [part='start'] {
        border: {
            color: $active-color;
            inline: {
                start-width: $active-border-width;
            };
            block: {
                start-width: $active-border-width;
                end-width: $active-border-width;
            }
        }
    }

    [part='notch'] {
        border: {
            width: $active-border-width;
            color: $active-color;
            top: $idle-border-width solid transparent;
        }
    }

    [part='filler'] {
        border: {
            width: $active-border-width;
            color: $active-color;
        }
    }

    [part='end'] {
        border: {
            color: $active-color;
            inline: {
                end-width: $active-border-width;
            };
            block: {
                start-width: $active-border-width;
                end-width: $active-border-width;
            };
        }
    }

    [part='label'] {
        @extend %label;

        color: $active-color;
    }

    [part~='prefix'],
    [part~='suffix'] {
        color: color(gray, 900);
    }
}

[part~='filled'] {
    [part~='prefix'],
    [part~='suffix'] {
        color: color(gray, 900);
    }
}

[part^='container'] {
    grid-template-columns: auto auto 1fr auto;
}

[part='start'] {
    @include border-radius(map.get($theme, 'border-border-radius')...);

    border-start-end-radius: 0;
    border-end-end-radius: 0;
    justify-content: flex-start;
    grid-area: 1 / 1;
    border: {
        style: solid;
        color: $idle-color;
        inline: {
            start-width: $idle-border-width;
            end-width: 0;
        };
        block: {
            start-width: $idle-border-width;
            end-width: $idle-border-width;
        };
    }

    > [part='prefix'] {
        ::slotted(*) {
            @extend %suffix-preffix;
        }
    }
}

[part='notch'] {
    display: flex;
    align-items: center;
    width: auto;
    min-width: 0;
    height: 100%;
    grid-area: 1 / 2;
    padding: 0 rem(4px);
    border: {
        width: $idle-border-width;
        style: solid;
        color: $idle-color;
        left: none;
        right: none;
    }

    overflow: visible;

    &:empty {
        display: none;
    }
}

[part='filler'] {
    grid-area: 1 / 3;
    border: {
        width: $idle-border-width;
        style: solid;
        color: $idle-color;
        left: none;
        right: none;
    }
}

[part='end'] {
    @include border-radius(map.get($theme, 'border-border-radius')...);

    border-start-start-radius: 0;
    border-end-start-radius: 0;
    justify-content: flex-end;
    grid-area: 1 / 4;
    border: {
        style: solid;
        color: $idle-color;
        inline: {
            start-width: 0;
            end-width: $idle-border-width;
        };
        block: {
            start-width: $idle-border-width;
            end-width: $idle-border-width;
        };
    }

    > [part='suffix'] {
        ::slotted(*) {
            @extend %suffix-preffix;
        }
    }
}

[part='start'],
[part='end'] {
    display: flex;
    min-width: sizable(rem(10px), rem(12px), rem(14px));
    height: var(--size);
    overflow: hidden;
}

[part='helper-text'] {
    @include type-style('caption');

    padding-inline: pad-inline(rem(14px), rem(16px), rem(18px));
    margin-top: rem(5px);
    color: color(gray, 700);
}

:host([invalid]),
:host([invalid]:focus-within) {
    [part='start'],
    [part='notch'],
    [part='filler'],
    [part='end'] {
        border-color: $error-color;
    }

    [part='label'] {
        color: $error-color;
    }

    [part~='filled'] + [part='notch'] {
        @extend %floated-styles;
    }
}

:host([invalid]:focus-within) {
    [part='notch'] {
        border-top: $idle-border-width solid transparent;
    }
}

:host([disabled]) {
    pointer-events: none;

    [part~='input'],
    [part='label'],
    [part='prefix'],
    [part='suffix'],
    [part='helper-text'] {
        color: color(gray, 500);
    }

    [part='start'],
    [part='filler'],
    [part='notch'],
    [part='end'] {
        color: color(gray, 500);
        border-color: color(gray, 500);
    }

    input::placeholder {
        color: color(gray, 500);
    }

    [part~='filled'] + [part='notch'] {
        @extend %floated-styles;
    }
}

// Filled Style
:host([outlined]:active),
:host([outlined]:focus),
:host([outlined]:focus-within) {
    [part='suffix'] {
        margin-inline-end: rem(-1px);
    }

    [part='prefix'] {
        margin-inline-start: rem(-1px);
    }

    [part='suffix'],
    [part='prefix'] {
        ::slotted(*) {
            padding-block: pad-block(10px, 12px, 14px);
        }
    }
}

:host(:not([outlined])) {
    [part='start'],
    [part='end'] {
        border-color: transparent;
        border-width: rem(1px);
    }

    [part='start'] {
        border-end-start-radius: 0;
    }

    [part='end'] {
        border-end-end-radius: 0;
    }

    [part='notch'],
    [part='filler'] {
        border-top: 1px solid transparent;
        border-bottom: transparent;
        border-bottom-width: rem(1px);
    }

    [part='label'] {
        inset-inline-start: rem(2px);
    }

    [part~='container'] {
        @include border-radius(map.get($theme, 'box-border-radius')...);

        border-end-start-radius: 0;
        border-end-end-radius: 0;
        background: color(gray, 200);
        border-bottom: 1px solid $idle-color;
        transition: border-bottom-width 150ms cubic-bezier(.4, 0, .2, 1);

        &::after {
            position: absolute;
            content: '';
            width: 100%;
            height: rem(2px);
            left: 0;
            right: 0;
            bottom: -1px;
            background: $active-color;
            transform: scaleX(0);
            transition: transform 180ms cubic-bezier(.4, 0, .2, 1), opacity 180ms cubic-bezier(.4, 0, .2, 1);
        }
    }

    [part~='labelled'] [part~='input'] {
        padding-top: rem(20px);
        padding-bottom: rem(6px);
    }

    input:placeholder-shown + [part='notch'] [part='label'],
    [part~='filled'] + [part='notch'] [part='label'] {
        transform: translateY(-106%);
    }
}

:host(:not([outlined]):hover) {
    [part~='container'] {
        background: $hover-background;
        border-bottom: 1px solid color(gray, 800);
    }
}

:host(:not([outlined]):focus-within) {
    [part~='container'] {
        background: $focus-background;
        border-bottom: 1px solid $active-color;

        &::after {
            transform: scaleX(1);
            opacity: 1;
        }
    }

    [part='notch'] [part='label'] {
        transform: translateY(-106%);
    }
}

:host(:not([outlined])[invalid]),
:host(:not([outlined])[invalid]:focus-within) {
    [part='start'],
    [part='notch'],
    [part='filler'],
    [part='end'] {
        border-color: transparent;
    }

    [part~='container'] {
        border-color: $error-color;

        &::after {
            background: $error-color;
        }
    }
}

:host(:not([outlined])[disabled]) {
    [part~='input'],
    [part='label'],
    [part='prefix'],
    [part='suffix'],
    [part='helper-text'] {
        color: color(gray, 500);
    }

    [part~='container'] {
        background: color(gray, 100);
        border-color: color(gray, 500);
        border-bottom-style: dashed;
    }
}
