@use '../../styles/utilities' as utils;

$border-color: utils.color(gray, 500) !default;
$checked-color: utils.color(secondary, 500) !default;
$thumb-color: utils.color(gray, 600) !default;
$disabled-color: utils.color(gray, 300) !default;

@mixin theme() {
    igc-switch {
        font-weight: 600;

        --size: #{utils.rem(34px)};
        --thumb-size: #{utils.rem(8px)};
        --thumb-offset: calc(var(--thumb-size) / 2);
    }

    igc-switch::part(control) {
        width: var(--size);
        height: utils.rem(16px);
        box-shadow: inset 0 0 0 2px $border-color;
        border-radius: utils.rem(8px);
        background: transparent;

        &::after {
            content: '';
            position: absolute;
            width: inherit;
            height: inherit;
            border-radius: inherit;
        }
    }

    igc-switch:hover::part(control) {
        box-shadow: 0 0 0 2px #{utils.color(gray, 200, .87)};

        &::after {
            border: 2px solid $border-color;
        }
    }

    igc-switch:focus-within::part(control) {
        box-shadow: 0 0 0 2px #{utils.color(gray, 300, .87)};

        &::after {
            border: 2px solid $border-color;
        }
    }

    igc-switch::part(control checked) {
        background: $checked-color;
        box-shadow: inset 0 0 0 2px $checked-color;
    }

    igc-switch:hover::part(control checked) {
        box-shadow: 0 0 0 2px #{utils.color(secondary, 100, .87)};

        &::after {
            border: 2px solid $checked-color;
        }
    }

    igc-switch:focus-within::part(control checked) {
        box-shadow: 0 0 0 2px #{utils.color(secondary, 200, .87)};

        &::after {
            border: 2px solid $checked-color;
        }
    }

    igc-switch[invalid]::part(control),
    igc-switch[invalid]::part(control checked),
    igc-switch[invalid]:focus-within::part(control) {
        box-shadow: inset 0 0 0 2px #{utils.color(error, 500)};
    }

    igc-switch[invalid]::part(control checked),
    igc-switch[invalid]::part(thumb) {
        background: #{utils.color(error, 500)};
    }

    igc-switch[invalid]:hover::part(control) {
        box-shadow: 0 0 0 2px #{utils.color(error, 100, .87)};

        &::after {
            border: 2px solid #{utils.color(error, 500)};
        }
    }

    igc-switch[invalid]:focus-within::part(control),
    igc-switch[invalid]:focus-within::part(control checked) {
        box-shadow: 0 0 0 2px #{utils.color(error, 200, .87)};

        &::after {
            border: 2px solid #{utils.color(error, 500)};
        }
    }

    igc-switch[disabled]::part(control),
    igc-switch[disabled][invalid]::part(control) {
        box-shadow: inset 0 0 0 2px $disabled-color;
    }

    igc-switch[disabled]::part(control checked),
    igc-switch[disabled][invalid]::part(control checked) {
        background: transparent;
    }

    igc-switch::part(thumb) {
        width: var(--thumb-size);
        height: var(--thumb-size);
        min-width: var(--thumb-size);
        border-radius: utils.rem(10px);
        animation-name: thumb-off;
        margin-inline-start: var(--thumb-offset);
        background: $thumb-color;
        box-shadow: none;

        &::after {
            display: none;
        }

        &:hover {
            box-shadow: none;
        }
    }

    igc-switch::part(thumb checked),
    igc-switch[invalid]::part(thumb checked) {
        background: #{utils.color(surface, 500)};
        animation-name: thumb-on;
        margin-inline-start: calc(var(--size) - var(--thumb-size) - var(--thumb-offset));
    }

    igc-switch[disabled]::part(thumb),
    igc-switch[disabled][invalid]::part(thumb) {
        background: $disabled-color;
    }

    igc-switch[disabled]::part(label) {
        color: $disabled-color;
    }
}
