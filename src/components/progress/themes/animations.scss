@use 'sass:map';
@use 'styles/utilities' as *;
@use 'vars' as *;

// Animation easing curves
$easing-curves: (
    // Primary translate easing curves
    primary-translate-start: cubic-bezier(0.5, 0, 0.7017, 0.4958),
    primary-translate-mid: cubic-bezier(0.3024, 0.3813, 0.55, 0.9563),

    // Primary scale easing curves
    primary-scale-slow-start: cubic-bezier(0.3347, 0.124, 0.7858, 1),
    primary-scale-quick-end: cubic-bezier(0.06, 0.11, 0.6, 1),

    // Secondary translate easing curves
    secondary-translate-start: cubic-bezier(0.15, 0, 0.515, 0.4096),
    secondary-translate-mid: cubic-bezier(0.31, 0.284, 0.8, 0.7337),
    secondary-translate-end: cubic-bezier(0.4, 0.627, 0.6, 0.902),

    // Secondary scale easing curves
    secondary-scale-slow-start: cubic-bezier(0.15, 0, 0.515, 0.4096),
    secondary-scale-mid: cubic-bezier(0.31, 0.284, 0.8, 0.7337),
    secondary-scale-smooth-end: cubic-bezier(0.4, 0.627, 0.6, 0.902)
);

// Helper function to retrieve easing curves
@function timing-function($key) {
    @return map.get($easing-curves, $key);
}

// Primary animation
@keyframes igc-indeterminate-primary {
    0% {
        transform: translateX(0);
    }

    20% {
        animation-timing-function: timing-function('primary-translate-start');
        transform: translateX(0);
    }

    59.15% {
        animation-timing-function: timing-function('primary-translate-mid');
        transform: translateX(83.671%);
    }

    100% {
        transform: translateX(200.611%);
    }
}

@keyframes igc-indeterminate-primary-scale {
    0% {
        transform: scaleX(0.08);
    }

    36.65% {
        animation-timing-function: timing-function('primary-scale-slow-start');
        transform: scaleX(0.08);
    }

    69.15% {
        animation-timing-function: timing-function('primary-scale-quick-end');
        transform: scaleX(0.6614);
    }

    100% {
        transform: scaleX(0.08);
    }
}

// Secondary animation
@keyframes igc-indeterminate-secondary {
    0% {
        animation-timing-function: timing-function('secondary-translate-start');
        transform: translateX(0);
    }

    25% {
        animation-timing-function: timing-function('secondary-translate-mid');
        transform: translateX(37.6519%);
    }

    48.35% {
        animation-timing-function: timing-function('secondary-translate-end');
        transform: translateX(84.3861%);
    }

    100% {
        transform: translateX(160.2777%);
    }
}

@keyframes igc-indeterminate-secondary-scale {
    0% {
        animation-timing-function: timing-function('secondary-scale-slow-start');
        transform: scaleX(0.08);
    }

    19.15% {
        animation-timing-function: timing-function('secondary-scale-mid');
        transform: scaleX(0.4571);
    }

    44.15% {
        animation-timing-function: timing-function('secondary-scale-smooth-end');
        transform: scaleX(0.727);
    }

    100% {
        transform: scaleX(0.08);
    }
}

// Fluent linear animations
@keyframes igc-indeterminate-bar-fluent {
    0% {
        transform: translateX(-100%);
        transform-origin: left;
    }

    100% {
        transform: translateX(310%);
        transform-origin: right;
    }
}

@keyframes igc-indeterminate-bar-fluent-rtl {
    0% {
        transform: translateX(100%);
        transform-origin: right;
    }

    100% {
        transform: translateX(-310%);
        transform-origin: left;
    }
}

// Circular animations
@keyframes igc-indeterminate-accordion {
    0% {
        stroke-dashoffset: calc(#{$circumference} * 2);
        stroke-dasharray: calc(#{$circumference} * 9 / 10);
    }

    100% {
        stroke-dashoffset: calc(#{$circumference} * 2 / 5);
    }
}

@keyframes igc-indeterminate-accordion-rtl {
    0% {
        stroke-dashoffset: calc(#{$circumference} * -2);
        stroke-dasharray: calc(#{$circumference} * 9 / 10);
    }

    100% {
        stroke-dashoffset: calc(#{$circumference} * -2 / 5);
    }
}

// Fluent: Circular progress animation for indeterminate state.
// Dynamically changes stroke-dasharray and rotates for a smooth spinning effect.
@keyframes igc-indeterminate-circular-fluent {
    0% {
        // Start the stroke at the correct position by adjusting the dasharray and dashoffset
        stroke-dasharray: calc(#{$circumference} * 0.0001), #{$circumference};
        stroke-dashoffset: calc(-1 * #{$circumference} / 4);

        // Start at 12 o'clock
        transform: rotate(-90deg);
    }

    50% {
        stroke-dasharray: calc(#{$circumference} / 2), calc(#{$circumference} / 2);

        // Adjust to keep starting point correct
        stroke-dashoffset: calc(-1 * #{$circumference} / 4);

        // Continue rotating smoothly
        transform: rotate(360deg);
    }

    100% {
        stroke-dasharray: calc(#{$circumference} * 0.0001), #{$circumference};

        // Reset properly
        stroke-dashoffset: calc(-1 * #{$circumference} / 4);

        // Complete the full rotation
        transform: rotate(990deg);
    }
}

@keyframes igc-indeterminate-circular-fluent-rtl {
    0% {
        stroke-dasharray: calc(#{$circumference} * 0.0001), #{$circumference};

        // Positive offset for opposite direction
        stroke-dashoffset: calc(#{$circumference} / 4);
        transform: rotate(90deg);
    }

    50% {
        stroke-dasharray: calc(#{$circumference} / 2), calc(#{$circumference} / 2);

        // Positive offset for opposite direction
        stroke-dashoffset: calc(#{$circumference} / 4);
        transform: rotate(-360deg);
    }

    100% {
        stroke-dasharray: calc(#{$circumference} * 0.0001), #{$circumference};

        // Positive offset for opposite direction
        stroke-dashoffset: calc(#{$circumference} / 4);
        transform: rotate(-990deg);
    }
}

// Generic animations
@keyframes igc-rotate-center {
    0% {
        transform: rotate(0);
    }

    100% {
        transform: rotate(360deg);
    }
}

@keyframes igc-initial-counter {
    from {
        --_progress-integer: 0;
        --_progress-fraction: 0;
    }
}

@keyframes igc-initial-width {
    from {
        width: 0;
    }

    to {
        width: calc(var(--_progress-whole, 0) * 1%);
    }
}

@keyframes igc-initial-dashoffset {
    from {
        /* Start with no progress (0%) */
        stroke-dashoffset: #{$circumference};
    }

    to {
        stroke-dashoffset: calc(#{$circumference} - var(--_progress-percentage) * #{$circumference});
    }
}
