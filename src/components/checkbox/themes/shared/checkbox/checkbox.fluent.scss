@use 'styles/utilities' as *;
@use '../../light/checkbox/themes' as *;

$theme: $fluent;
$border-color: var-get($theme, 'empty-color');
$hover-color: var-get($theme, 'tick-color-hover');
$checked-hover-color: var-get($theme, 'fill-color-hover');
$invalid-color: var-get($theme, 'error-color');
$invalid-hover-color: var-get($theme, 'error-color-hover');
$disabled-color: var-get($theme, 'disabled-color');

:host {
    ::part(helper-text) {
        @include type-style('caption');

        margin-block-start: pad-block(rem(16px));
        grid-auto-rows: minmax(rem(18px), auto);
    }
}

[part~='control'] {
    // Removing visual artifacts, to understand the problem see
    // https://stackoverflow.com/questions/69658462/inset-box-shadow-visual-artifacts-in-google-chrome
    transform: translate3d(0, 0, 0);

    &::after {
        border-radius: var-get($theme, 'border-radius');
        background: transparent;
        box-shadow: inset 0 0 0 rem(1px) $border-color;
    }
}

[part='control checked'] {
    &::after {
        background: var-get($theme, 'fill-color');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }
}

[part~='indicator'] {
    --indicator-size: #{rem(16px)};
}

:host(:hover) {
    [part~='indicator'] {
        opacity: 1;
        stroke: var-get($theme, 'tick-color-hover');
        stroke-dashoffset: 0;
        transition: opacity .1s ease-out;
    }

    [part='indicator checked'] {
        stroke: var-get($theme, 'tick-color');
    }
}

:host([indeterminate]) {
    [part~='indicator'] {
        display: none;
    }

    [part~='control']::before {
        border-radius: var-get($theme, 'border-radius');
        display: block;
        width: inherit;
        height: inherit;
        content: '';
        transform: scale(.5);
        transition-duration: .1s;
        background: var-get($theme, 'fill-color');
        z-index: 1;
    }

    [part='control checked'] {
        &::after {
            background: transparent;
        }
    }

    [part~='control']::after {
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }
}

:host([indeterminate]:hover) [part~='control'],
:host([indeterminate]:focus-visible) [part~='control'] {
    &::before {
        background: $checked-hover-color;
    }

    &::after {
        box-shadow: inset 0 0 0 rem(1px) $checked-hover-color;
    }

    [part='control checked'] {
        &::after {
            background: transparent;
        }
    }
}

:host(:state(ig-invalid):not([disabled])) {
    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $invalid-color;
        }
    }
}

:host(:state(ig-invalid):focus-visible) {
    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $invalid-hover-color;
        }
    }
}

:host(:state(ig-invalid):hover) {
    [part~='indicator'] {
        stroke: $invalid-color;
    }

    [part='indicator checked'] {
        stroke: var-get($theme, 'tick-color');
    }

    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $invalid-hover-color;
        }
    }
}

:host(:not([disabled]):state(ig-invalid)[indeterminate]),
:host(:not(:disabled):state(ig-invalid)[indeterminate]) {
    [part~='control'] {
        &::before {
            background: $invalid-color;
        }

        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-color;
            background: transparent;
        }
    }

    &:focus-within {
        [part~='control'] {
            &::before {
                background: $invalid-hover-color;
            }

            &::after {
                box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
                background: transparent;
            }
        }
    }
}

:host(:hover:not([disabled]):state(ig-invalid)[indeterminate]),
:host(:hover:not(:disabled):state(ig-invalid)[indeterminate]) {
    [part~='control'] {
        &::before {
            background: $invalid-hover-color;
        }

        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
            background: transparent;
        }
    }
}

:host(:not([disabled], :state(ig-invalid))[indeterminate]:hover) {
    [part='control checked']::after {
        background: transparent;
    }
}

[part~='focused'] {
    position: relative;

    $focus-outline-offset-top: rem(2px);
    $focus-outline-offset-left: rem(2px);

    &::after {
        content: '';
        position: absolute;
        top: -$focus-outline-offset-top;
        left: -$focus-outline-offset-left;
        box-shadow: 0 0 0 rem(1px) var-get($theme, 'focus-outline-color');
        width: calc(100% + (#{$focus-outline-offset-left} * 2));
        height: calc(100% + (#{$focus-outline-offset-top} * 2));
    }
}

:host([disabled]),
:host(:disabled) {
    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $disabled-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $disabled-color;
        }
    }
}

:host([disabled][indeterminate]),
:host(:disabled[indeterminate]) {
    [part~='control'] {
        &::before {
            background: $disabled-color;
        }

        &::after {
            box-shadow: inset 0 0 0 rem(1px) $disabled-color;
            background: transparent;
        }
    }
}
