@use 'sass:map';
@use '../../../../styles/common/component';
@use '../../../../styles/utilities' as *;
@use '../../../../styles/themes/schemas' as *;

$schema: map.get($light-fluent-schema, 'radio');
$theme: digest-schema($schema);

:host {
    @include css-vars-from-theme($theme, 'ig-radio');
}

[part~='label'] {
    @include type-style('body-2');

    color: var-get($theme, 'label-color');
}

:host [part~='base'] {
    transition-duration: .1s;
    gap: rem(6px);
}

:host [part~='control'] {
    @include border-radius(var(--size));

    width: var(--size);
    height: var(--size);
    min-width: var(--size);

    // TODO SEE IF THIS CAN BE REMOVED
    transition: none;

    &::before,
    &::after {
        @include border-radius(calc(var(--size) / 2));

        width: var(--size);
        height: var(--size);
        inset-inline-start: 0;
        top: 0;

        // TODO SEE IF THIS CAN BE REMOVED
        transform: none;
    }

    &::before {
        backface-visibility: hidden;
        transform: scale(0);
        transition: all .2s ease-in;
        z-index: 1;
    }

    &::after {
        border: rem(1px) solid var-get($theme, 'empty-color');
    }
}

:host [part='control checked'] {
    &::before {
        border-color: var-get($theme, 'fill-color');
        background: var-get($theme, 'fill-color');
        transform: scale(.5);
    }

    &::after {
        border-color: var-get($theme, 'fill-color');
    }
}

[part~='focused'] {
    position: relative;

    $focus-outline-offset-top: rem(2px);
    $focus-outline-offset-left: rem(2px);

    &::after {
        content: '';
        position: absolute;
        top: -$focus-outline-offset-top;
        left: -$focus-outline-offset-left;
        box-shadow: 0 0 0 rem(1px) var-get($theme, 'focus-outline-color');
        width: calc(100% + (#{$focus-outline-offset-left} * 2));
        height: calc(100% + (#{$focus-outline-offset-top} * 2));
    }

    [part='control'] {
        &::before {
            background: var-get($theme, 'hover-color')
        }
    }
}

:host(:hover) {
    [part='control'] {
        &::before {
            background: var-get($theme, 'hover-color');
            transform: scale(.5);
        }
    }

    [part='control checked'] {
        &::after {
            border-color: var-get($theme, 'fill-hover-border-color');
        }

        &::before {
            background: var-get($theme, 'fill-color-hover');
            border-color: var-get($theme, 'fill-hover-border-color');
        }
    }
}

:host(:not([disabled])[invalid]:hover) {
    [part='control'] {
        &::after {
            border-color: var-get($theme, 'error-color-hover');
        }

        &::before {
            background: var-get($theme, 'error-color-hover');
        }
    }

    [part='control checked'] {
        &::after {
            border-color: var-get($theme, 'error-color-hover');
        }

        &::before {
            background: var-get($theme, 'error-color-hover');
        }
    }
}

:host(:not([disabled])[invalid]) {
    [part~='label'] {
        color: var-get($theme, 'error-color');
    }

    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'error-color');
        }
    }

    [part='control checked'] {
        &::before {
            background: var-get($theme, 'error-color');
        }
    }

    [part='focused'] [part='control'] {
        &::after {
            border-color: var-get($theme, 'error-color-hover');
        }

        &::before {
            background: var-get($theme, 'error-color-hover');
        }
    }
}

:host([disabled]),
:host(:disabled) {
    [part~='label'] {
        color: var-get($theme, 'disabled-label-color');
    }

    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'disabled-color');
        }
    }

    [part='control checked'] {
        &::before {
            background: var-get($theme, 'disabled-color');
            border-color: var-get($theme, 'disabled-color');
        }
    }
}
