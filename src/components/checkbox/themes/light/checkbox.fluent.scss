@use 'sass:map';
@use '../../../../styles/common/component';
@use '../../../../styles/utilities' as *;
@use '../../../../styles/themes/schemas/fluent/light' as *;

$schema: map.get($light-fluent-schema, 'checkbox');
$border-radius: border-radius(map.get($schema, 'border-radius')...);
$theme: digest-schema(extend(
    $schema,
    (
        border-radius: $border-radius
    )
));
$border-color: var-get($theme, 'empty-color');
$hover-color: var-get($theme, 'tick-color-hover');
$checked-hover-color: var-get($theme, 'fill-color-hover');
$invalid-color: var-get($theme, 'error-color');
$invalid-hover-color: var-get($theme, 'error-color-hover');
$disabled-color: var-get($theme, 'disabled-color');

:host {
    @include css-vars-from-theme($theme, 'ig-checkbox');
}

[part~='control'] {
    width: var(--size, rem(20px));
    height: var(--size, rem(20px));
    min-width: var(--size, rem(20px));

    // Removing visual artifacts, to understand the problem see
    // https://stackoverflow.com/questions/69658462/inset-box-shadow-visual-artifacts-in-google-chrome
    transform: translate3d(0, 0, 0);

    &::after {
        border-radius: var-get($theme, 'border-radius');
        background: transparent;
        box-shadow: inset 0 0 0 rem(1px) $border-color;
    }
}

[part='control checked'] {
    &::after {
        background: var-get($theme, 'fill-color');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }
}

[part~='label'] {
    @include type-style('body-2');

    color: var-get($theme, 'label-color');
}

[part~='indicator'] {
    stroke: var-get($theme, 'tick-color');
    stroke-width: 1.5;
    transform: scale(.8);
}

:host(:hover) {
    [part~='indicator'] {
        opacity: 1;
        stroke: var-get($theme, 'tick-color-hover');
        stroke-dashoffset: 0;
        transition: opacity .1s ease-out;
    }

    [part='indicator checked'] {
        stroke: var-get($theme, 'tick-color');
    }
}

:host(:hover) [part='control checked'],
:host(:focus-within) [part='control checked'] {
    &::after {
        background: $checked-hover-color;
        box-shadow: inset 0 0 0 rem(1px) $checked-hover-color;
    }
}

:host([indeterminate]) {
    [part~='indicator'] {
        display: none;
    }

    [part~='control']::before {
        border-radius: var-get($theme, 'border-radius');
        display: block;
        width: inherit;
        height: inherit;
        content: '';
        transform: scale(.5);
        transition-duration: .1s;
        background: var-get($theme, 'fill-color');
        z-index: 1;
    }

    [part='control checked'] {
        &::after {
            background: transparent;
        }
    }

    [part~='control']::after {
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }
}

:host([indeterminate]:hover) [part~='control'],
:host([indeterminate]:focus-within) [part~='control'] {
    &::before {
        background: $checked-hover-color;
    }

    &::after {
        box-shadow: inset 0 0 0 rem(1px) $checked-hover-color;
    }

    [part='control checked'] {
        &::after {
            background: transparent;
        }
    }
}

:host([invalid]:not([disabled])) {
    [part~='label'] {
        color: $invalid-color;
    }

    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $invalid-color;
        }
    }
}

:host([invalid]:focus-within) {
    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $invalid-hover-color;
        }
    }
}

:host([invalid]:hover) {
    [part~='indicator'] {
        stroke: $invalid-color;
    }

    [part='indicator checked'] {
        stroke: var-get($theme, 'tick-color');
    }

    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $invalid-hover-color;
        }
    }
}

:host(:not([disabled])[invalid][indeterminate]) {
    [part~='control'] {
        &::before {
            background: $invalid-color;
        }

        &::after {
            box-shadow: inset 0 0 0 rem(1px) $invalid-color;
            background: transparent;
        }
    }

    &:hover {
        [part~='control'] {
            &::before {
                background: $invalid-hover-color;
            }

            &::after {
                box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
                background: transparent;
            }
        }
    }

    &:focus-within {
        [part~='control'] {
            &::before {
                background: $invalid-hover-color;
            }

            &::after {
                box-shadow: inset 0 0 0 rem(1px) $invalid-hover-color;
                background: transparent;
            }
        }
    }
}

:host([invalid][checked]) [part='control checked'] {
    &::after {
        box-shadow: inset 0 0 0 rem(1px) $invalid-color;
        background: $invalid-color;
    }
}

[part~='focused'] {
    position: relative;

    $focus-outline-offset-top: rem(2px);
    $focus-outline-offset-left: rem(2px);

    &::after {
        content: '';
        position: absolute;
        top: -$focus-outline-offset-top;
        left: -$focus-outline-offset-left;
        box-shadow: 0 0 0 rem(1px) color(gray, 700);
        width: calc(100% + (#{$focus-outline-offset-left} * 2));
        height: calc(100% + (#{$focus-outline-offset-top} * 2));
    }
}

:host([disabled]) {
    [part~='label'] {
        color: var-get($theme, 'disabled-color-label');
    }

    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $disabled-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $disabled-color;
        }
    }
}

:host([disabled][indeterminate]) {
    [part~='control'] {
        &::before {
            background: $disabled-color;
        }

        &::after {
            box-shadow: inset 0 0 0 rem(1px) $disabled-color;
            background: transparent;
        }
    }
}

:host([disabled][invalid]) {
    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) $disabled-color;
        }
    }

    [part='control checked'] {
        &::after {
            background: $disabled-color;
        }
    }
}

:host([disabled][invalid][indeterminate]) {
    [part~='control'] {
        &::before {
            background: $disabled-color;
        }

        &::after {
            box-shadow: inset 0 0 0 rem(1px) $disabled-color;
            background: transparent;
        }
    }
}

