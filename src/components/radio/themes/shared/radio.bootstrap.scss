@use 'styles/utilities' as *;
@use '../light/themes' as *;

$theme: $bootstrap;

:host {
    gap: rem(16px);

    &::part(base) {
        transition: none;
    }
}

[part~='label'] {
    @include type-style('body-1');
}

[part~='base'] {
    gap: rem(8px);
}

[part~='control'] {
    --size: #{rem(16px)};

    border-radius: var(--size);
    width: var(--size);
    height: var(--size);
    min-width: var(--size);
    background: var-get($theme, 'empty-fill-color');
    transition: transparent;

    &::before,
    &::after {
        transition: none;
        border-radius: calc(var(--size) / 2);
    }

    &::before {
        transform: translate(-50%, -50%) scale(.4375);
    }

    &::after {
        width: inherit;
        height: inherit;
        min-width: inherit;
        border: rem(1px) solid var-get($theme, 'empty-color');
    }
}

[part~='focused'] {
    [part~='control'] {
        box-shadow: 0 0 0 rem(4px) var-get($theme, 'focus-outline-color');
    }

    [part='control']::after {
        border-color: color('primary', 200);
    }
}

[part='control checked'] {
    &::after {
        background: var-get($theme, 'fill-color');
        border-color: var-get($theme, 'fill-color');
    }

    &::before {
        border-color: var-get($theme, 'fill-hover-border-color');
        background: var-get($theme, 'fill-hover-border-color');
    }
}

:host(:hover) {
    [part='control'] {
        &::after {
            border-color: var-get($theme, 'hover-color');
        }
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'fill-color-hover');
            border-color: var-get($theme, 'fill-color-hover');
        }
    }

    [part~='focused'] [part='control'] {
        &::after {
            border-color: color('primary', 300);
        }
    }
}

:host(:not([disabled])[invalid]),
:host(:not(:disabled)[invalid]) {
    [part~='control']::after {
        border-color: var-get($theme, 'error-color');
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'error-color');
        }
    }

    [part~='focused'] [part~='control'] {
        box-shadow: 0 0 0 rem(4px) var-get($theme, 'focus-outline-color-error');
    }
}

:host(:not([disabled])[invalid]:hover) {
    [part~='control']::after {
        border-color: var-get($theme, 'error-color-hover');
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'error-color-hover');
        }
    }
}

:host([disabled]),
:host(:disabled) {
    [part='control'] {
        &::after {
            border-color: var-get($theme, 'disabled-color');
        }
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'disabled-fill-color');
            border-color: var-get($theme, 'disabled-fill-color');
        }
    }
}
