@use 'styles/utilities' as *;
@use '../../light/checkbox/themes' as *;

$theme: $bootstrap;

:host {
    ::part(helper-text) {
        @include type-style('body-2');

        margin-block-start: rem(16px);
        grid-auto-rows: minmax(rem(18px), auto);
    }
}

[part~='label'] {
    @include type-style('body-1');

    transition: none;
}

[part~='indicator'] {
    --indicator-size: #{rem(11px)};

    transition: none;
}

[part~='control'] {
    --size: #{rem(16px)};

    border-radius: var-get($theme, 'border-radius-ripple');
    transition: all .15s ease-in-out;
    background: var-get($theme, 'empty-fill-color');

    // Removing visual artifacts, to understand the problem see
    // https://stackoverflow.com/questions/69658462/inset-box-shadow-visual-artifacts-in-google-chrome
    transform: translate3d(0, 0, 0);

    &::after {
        border-radius: var-get($theme, 'border-radius');
        width: inherit;
        height: inherit;
        min-width: inherit;
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'empty-color');
        transition: all .15s ease-in-out;
    }
}

[part='control checked'] {
    &::after {
        background: var-get($theme, 'fill-color');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }
}

:host(:hover) {
    [part~='control']::after {
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'empty-color-hover');
    }

    [part='control checked']::after {
        background: var-get($theme, 'fill-color-hover');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color-hover');
    }
}

:host(:focus-visible) ,
[part~='focused'] {
    [part~='control'] {
        box-shadow: 0 0 0 rem(4px) var-get($theme, 'focus-outline-color');
    }

    [part='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) color(primary, 200);
        }
    }

    &:hover {
        [part='control']::after {
            box-shadow: inset 0 0 0 rem(1px) color(primary, 300);
        }
    }
}

:host([indeterminate]) {
    [part~='control']::after {
        background: var-get($theme, 'fill-color');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color');
    }

    [part~='indicator'] {
        transform: rotate(45deg) translateX(-.075rem) scale(.7);
    }
}

:host(:not([disabled])[indeterminate]:hover) {
    [part~='control']::after {
        background: var-get($theme, 'fill-color-hover');
        box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'fill-color-hover');
    }
}

:host(:not([disabled])[invalid]),
:host(:not(:disabled)[invalid]) {
    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'error-color');
            border-color: var-get($theme, 'error-color');
        }
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'error-color');
        }
    }

    &:focus-visible {
        [part~='control'],
        [part='control checked'] {
            box-shadow: 0 0 0 rem(4px) var-get($theme, 'focus-outline-color-error');
        }
    }
}

:host(:hover:not([disabled])[invalid]),
:host(:hover:not(:disabled)[invalid]),
:host(:hover:not([disabled])[invalid][indeterminate]),
:host(:hover:not(:disabled)[invalid][indeterminate]) {
    [part~='control'],
    [part='control checked'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'error-color-hover');
        }
    }

    [part='control checked'] {
        &::after {
            background: var-get($theme, 'error-color-hover');
        }
    }
}

:host(:not([disabled])[invalid][indeterminate]),
:host(:not(:disabled)[invalid][indeterminate]) {
    [part~='control'] {
        &::after {
            background: var-get($theme, 'error-color');
        }
    }
}

:host(:hover:not([disabled])[invalid][indeterminate]),
:host(:hover:not(:disabled)[invalid][indeterminate]) {
    [part~='control'] {
        &::after {
            background: var-get($theme, 'error-color-hover');
        }
    }
}

:host(:focus-visible:not([disabled])[invalid]) [part~='control'],
:host(:focus-visible:not(:disabled)[invalid]) [part~='control'],
:host(:not([disabled])[invalid]) [part~='focused'] [part~='control'],
:host(:not(:disabled)[invalid]) [part~='focused'] [part~='control'] {
    box-shadow: 0 0 0 rem(4px) var-get($theme, 'focus-outline-color-error');
}

:host([disabled]),
:host(:disabled) {
    [part~='control'] {
        &::after {
            box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'disabled-color');
        }
    }

    [part='control checked']::after {
        background: var-get($theme, 'disabled-indeterminate-color');
        box-shadow: none;
    }
}

:host([disabled][indeterminate]),
:host(:disabled[indeterminate]) {
    [part~='control']::after {
        background: var-get($theme, 'disabled-indeterminate-color');
        box-shadow: none;
    }
}
