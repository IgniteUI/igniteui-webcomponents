@use 'sass:map';
@use '../../../../styles/utilities' as utils;

$container-background: var(--container-background, utils.color(surface, 500)) !default;
$input-height: (
    large: utils.rem(48px),
    medium: utils.rem(40px),
    small: utils.rem(32px)
);
$resting-border-width: utils.rem(1px);
$focused-border-width: utils.rem(2px);

:host {
    [part='prefix'],
    [part='suffix'] {
        padding: 0 utils.rem(10px);
        color: utils.color(gray, 700);
        background: utils.color(gray, 100);
        font-size: utils.rem(14px);
    }

    [part='prefix'] {
        grid-area: 1 / 1;
    }

    [part='suffix'] {
        grid-area: 1 / 3;
    }

    [part='label'] {
        margin-bottom: utils.rem(8px);
        font-size: utils.rem(14px);
        font-weight: 600;
        color: utils.color(gray, 900);
    }

    [part^='container'] {
        @include utils.border-radius(2px);

        border: #{$resting-border-width} solid utils.color(gray, 500);
        transition: none;
        background: $container-background;
        cursor: text;
        grid-template-columns: auto 1fr auto;
        overflow: hidden;

        &::after {
            background: transparent;
            transform: none;
            height: initial;
        }
    }

    [part~='input'] {
        background: initial;
        font-size: utils.rem(14px);
        padding: utils.rem(8px);
        height: 100%;
        max-height: 100%;
        border: none;
        grid-area: 1 / 2;
    }

    [part='helper-text'] {
        padding: 0;
        margin-top: utils.rem(8px);
        color: utils.color(gray, 600);
    }
}

:host([size='large']) {
    [part^='container'] {
        height: map.get($input-height, 'large');
    }

    [part~='input'] {
        height: #{map.get($input-height, 'large') - ($resting-border-width * 2)};
    }
}

:host([size='medium']) {
    [part^='container'] {
        height: map.get($input-height, 'medium');
    }

    [part~='input'] {
        height: #{map.get($input-height, 'medium') - ($resting-border-width * 2)};
    }
}

:host([size='small']) {
    [part^='container'] {
        height: map.get($input-height, 'small');
    }

    [part~='input'] {
        height: #{map.get($input-height, 'small') - ($resting-border-width * 2)};
    }
}

:host([size='large']:focus-within) {
    [part~='input'] {
        height: #{map.get($input-height, 'large') - ($focused-border-width * 2)};
    }
}

:host([size='medium']:focus-within) {
    [part~='input'] {
        height: #{map.get($input-height, 'medium') - ($focused-border-width * 2)};
    }
}

:host([size='small']:focus-within) {
    [part~='input'] {
        height: #{map.get($input-height, 'small') - ($focused-border-width * 2)};
    }
}

:host(:not([invalid]):hover) {
    [part^='container'] {
        border-color: utils.color(gray, 700);
    }
}

:host(:focus-within) {
    [part^='container'] {
        border-width: #{$focused-border-width};
    }

    [part='prefix'] {
        margin-inline-start: utils.rem(-1px);
    }

    [part='suffix'] {
        margin-inline-end: utils.rem(-1px);
    }
}

:host(:not([invalid]):focus-within),
:host(:not([invalid]):focus-within:hover) {
    [part^='container'] {
        border-color: utils.color(primary, 500);
    }
}

:host([required]),
:host([outlined][required]) {
    [part='label']::after {
        color: utils.color(error, 500);
    }
}

:host([invalid]),
:host([outlined][invalid]) {
    [part^='container'] {
        border-color: utils.color(error, 500);
    }

    [part='helper-text'] {
        color: utils.color(error, 500);
    }
}

:host([disabled]) {
    pointer-events: none;

    [part^='container'] {
        border-color: utils.color(gray, 100);
        color: utils.color(gray, 400);
    }

    [part^='container'],
    [part='prefix'],
    [part='suffix'] {
        background: utils.color(gray, 100);
    }

    [part='prefix'],
    [part='suffix'],
    [part='label'],
    [part='helper-text'] {
        color: utils.color(gray, 400);
    }
}
