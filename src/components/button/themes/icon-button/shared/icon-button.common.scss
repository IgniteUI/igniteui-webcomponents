@use 'styles/utilities' as *;
@use '../light/themes' as *;

$flat-theme: $material-flat;
$contained-theme: $material-contained;
$outlined-theme: $material-outlined;

[part='base'] {
    border-radius: var-get($flat-theme, 'border-radius');
    width: var-get($flat-theme, 'size');
    height: var-get($flat-theme, 'size');
}

:host([variant='flat']) {
    @include css-vars-from-theme($flat-theme, 'ig-icon-button');

    --component-size: var(--ig-size, #{var-get($flat-theme, 'default-size')});

    [part='base'] {
        color: var-get($flat-theme, 'foreground');
        background: var-get($flat-theme, 'background');

        &:hover {
            background: var-get($flat-theme, 'hover-background');
            color: var-get($flat-theme, 'hover-foreground');
        }
    
        &:focus,
        &:focus-within {
            background: var-get($flat-theme, 'focus-background');
            color: var-get($flat-theme, 'focus-foreground');

            &:hover {
                background: var-get($flat-theme, 'focus-hover-background');
                color: var-get($flat-theme, 'focus-hover-foreground');
            }
        }

        &:active {
            background: var-get($flat-theme, 'active-background');
            color: var-get($flat-theme, 'active-foreground');
        }
    }

    igc-icon {
        color: var-get($flat-theme, 'foreground');
    }

    ::slotted(igc-ripple) {
        border-radius: var-get($flat-theme, 'border-radius');
    }
}

:host([variant='contained']) {
    @include css-vars-from-theme($contained-theme, 'ig-icon-button');

    --component-size: var(--ig-size, #{var-get($contained-theme, 'default-size')});

    [part='base'] {
        background: var-get($contained-theme, 'background');
        color: var-get($contained-theme, 'foreground');

        &:hover {
            background: var-get($contained-theme, 'hover-background');
            color: var-get($contained-theme, 'hover-foreground');
        }

        &:focus,
        &:focus-within {
            background: var-get($contained-theme, 'focus-background');
            color: var-get($contained-theme, 'focus-foreground');

            &:hover {
                background: var-get($contained-theme, 'focus-hover-background');
                color: var-get($contained-theme, 'focus-hover-foreground');
            }
        }

        &:active {
            background: var-get($contained-theme, 'active-background');
            color: var-get($contained-theme, 'active-foreground');
        }
    }

    igc-icon {
        color: var-get($contained-theme, 'foreground');
    }

    ::slotted(igc-ripple) {
        border-radius: var-get($contained-theme, 'border-radius');
    }
}

:host([variant='outlined']) {
    @include css-vars-from-theme($outlined-theme, 'ig-icon-button');

    --component-size: var(--ig-size, #{var-get($outlined-theme, 'default-size')});

    [part='base'] {
        color: var-get($outlined-theme, 'foreground');
        background: var-get($outlined-theme, 'background');
        border: rem(1px) solid var-get($outlined-theme, 'border-color');

        &:hover {
            background: var-get($outlined-theme, 'hover-background');
            color: var-get($outlined-theme, 'hover-foreground');
        }

        &:focus,
        &:focus-within {
            background: var-get($outlined-theme, 'focus-background');
            color: var-get($outlined-theme, 'focus-foreground');

            &:hover {
                background: var-get($outlined-theme, 'focus-hover-background');
                color: var-get($outlined-theme, 'focus-hover-foreground');
            }
        }

        &:active {
            background: var-get($outlined-theme, 'active-background');
            color: var-get($outlined-theme, 'active-foreground');
        }
    }

    igc-icon {
        color: var-get($outlined-theme, 'foreground');
    }

    ::slotted(igc-ripple) {
        border-radius: var-get($outlined-theme, 'border-radius');
    }
}

:host([disabled]),
:host(:disabled) {
    [part='base'] {
        background: var-get($flat-theme, 'disabled-background');
        color: var-get($flat-theme, 'disabled-foreground');
    }

    igc-icon {
        color: var-get($flat-theme, 'disabled-foreground');
    }
}

:host([disabled][variant='contained']),
:host(:disabled[variant='contained']) {
    [part='base'] {
        background: var-get($contained-theme, 'disabled-background');
        color: var-get($contained-theme, 'disabled-foreground');
    }

    igc-icon {
        color: var-get($contained-theme, 'disabled-foreground');
    }
}

:host([disabled][variant='outlined']),
:host(:disabled[variant='outlined']) {
    [part='base'] {
        background: var-get($outlined-theme, 'disabled-background');
        color: var-get($outlined-theme, 'disabled-foreground');
        border: rem(1px) solid var-get($outlined-theme, 'disabled-border-color');
    }

    igc-icon {
        color: var-get($outlined-theme, 'disabled-foreground');
    }
}
