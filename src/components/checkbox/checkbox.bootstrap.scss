@use '../../styles/utilities' as utils;

@mixin theme() {
    igc-checkbox::part(control) {
        $size: var(--size, utils.rem(16px));
        width: $size;
        height: $size;
        min-width: $size;
        transition: background-color .15s ease-in-out;
        border-radius: utils.rem(4px);
        background: none;

        &::after {
            width: inherit;
            height: inherit;
            min-width: inherit;
            border-radius: inherit;
            border: none;
            box-shadow: inset 0 0 0 1px #{utils.color(gray, 400)};
            transition: none;
        }
    }

    igc-checkbox::part(indicator) {
        stroke-width: 4;
        transform: scale(.7);
        transition: none;
        stroke: white;
    }

    igc-checkbox::part(label) {
        transition: none;
    }

    igc-checkbox[indeterminate]::part(indicator) {
        transform: rotate(45deg) translateX(-.075rem) scale(.7);
        stroke-dashoffset: 41;
    }

    igc-checkbox:focus-within::part(control) {
        box-shadow: 0 0 0 4px #{utils.color(primary, 100)};

        &::after {
            box-shadow: inset 0 0 0 1px #{utils.color(primary, 500)};
        }
    }

    igc-checkbox::part(control checked),
    igc-checkbox[indeterminate]::part(control) {
        &::after {
            background: #{utils.color(primary, 500)};
            box-shadow: inset 0 0 0 1px #{utils.color(primary, 500)};
        }
    }

    igc-checkbox:focus-within::part(control checked),
    igc-checkbox[indeterminate]:focus-within::part(control) {
        &::after {
            box-shadow: inset 0 0 0 1px #{utils.color(primary, 500)};
        }
    }

    igc-checkbox[invalid]::part(control) {
        &::after {
            box-shadow: inset 0 0 0 1px #{utils.color(error, 500)};
        }
    }

    igc-checkbox[invalid]::part(control checked),
    igc-checkbox[invalid][indeterminate]::part(control) {
        &::after {
            box-shadow: inset 0 0 0 1px #{utils.color(error, 500)};
            background: utils.color(error, 500);
        }
    }

    igc-checkbox[invalid]:focus-within::part(control),
    igc-checkbox[invalid]:focus-within::part(control checked),
    igc-checkbox[invalid][indeterminate]:focus-within::part(control) {
        box-shadow: 0 0 0 4px #{utils.color(error, 100)};
    }

    igc-checkbox[disabled]::part(control),
    igc-checkbox[disabled][invalid]::part(control) {
        &::after {
            box-shadow: inset 0 0 0 1px #{utils.color(gray, 300)};
        }
    }

    igc-checkbox[disabled],
    igc-checkbox[disabled][invalid] {
        &::part(control checked)::after {
            background: #{utils.color(primary, 200)};
            box-shadow: inset 0 0 0 1px #{utils.color(primary, 200)};
        }
    }

    igc-checkbox[disabled][indeterminate],
    igc-checkbox[disabled][invalid][indeterminate]{
        &::part(control)::after {
            background: #{utils.color(primary, 200)};
            box-shadow: inset 0 0 0 1px #{utils.color(primary, 200)};
        }
    }
}
