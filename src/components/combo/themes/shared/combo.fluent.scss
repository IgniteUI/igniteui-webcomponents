@use 'styles/utilities' as *;
@use '../light/themes' as *;
@use '../../../dropdown/themes/light/themes' as dropdown-theme;

$theme: $fluent;
$dropdown-theme: dropdown-theme.$fluent;

:host {
    --component-size: var(--ig-size, #{var-get($theme, 'default-size')});
    --combo-size: var(--component-size);

    ::slotted([slot='helper-text']) {
        @include type-style('caption');

        display: block;
        padding: 0;
        margin-top: rem(5px);
        color: $fluent-helper-text;
    }
}

[part~='toggle-icon'] {
    background: var-get($theme, 'toggle-button-background');
    color: var-get($theme, 'toggle-button-foreground');

    igc-icon {
        color: inherit;
    }
}

[part~='clear-icon'] {
    background: var-get($theme, 'clear-button-background');
    color: var-get($theme, 'clear-button-foreground');

    igc-icon {
        color: inherit;
    }
}

[part='filter-input'] {
    padding: pad(2px, 4px, 8px);
}

[part='list-wrapper'] {
    border-radius: var-get($dropdown-theme, 'border-radius');

    igc-input::part(suffix) {
        background: transparent;
    }

    igc-input::part(input) {
        height: var(--size);
    }
}

[part='empty'] {
    color: var-get($theme, 'empty-list-placeholder-color');
}

:host(:focus-within) {
    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-focus--border');
        color: var-get($theme, 'toggle-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }

    [part~='clear-icon'] {
        background: var-get($theme, 'clear-button-background-focus');
        color: var-get($theme, 'clear-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }
}

:host([invalid]) {
    ::slotted([slot='helper-text']) {
        color: $fluent-error-text;
    }
}

:host([invalid]:focus-within) {
    igc-input::part(input) {
        height: calc(var(--size) - #{rem(4px)});
    }

    igc-input::part(suffix) {
        height: var(--size);
        margin-inline-end: rem(-1px);
        margin-block-start: rem(-2px);
    }

    igc-input::part(prefix) {
        margin-inline-start: rem(-1px);
        margin-block-start: rem(-2px);
    }
}

:host(:disabled),
:host([disabled]) {
    ::slotted([slot='prefix']),
    ::slotted([slot='suffix']),
    igc-input::part(label),
    igc-input::part(input)::placeholder,
    ::slotted([slot='helper-text']) {
        color: $fluent-disabled-text;
    }

    [part~='clear-icon'] {
        background: inherit;
        color: $fluent-disabled-text;

        igc-icon {
            color: inherit;
        }
    }

    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-disabled');
        color: var-get($theme, 'toggle-button-foreground-disabled');

        igc-icon {
            color: inherit;
        }
    }
}
