@use 'sass:map';
@use '../../../../../styles/utilities' as *;
@use '../../../../../styles/themes/schemas/fluent/light' as *;

$flat-schema: map.get($light-fluent-schema, 'button', 'flat');
$flat-border-radius: border-radius(map.get($flat-schema, 'border-radius')...);
$flat-theme: digest-schema(extend(
    $flat-schema,
    (
        border-radius: $flat-border-radius
    )
));

$contained-schema: map.get($light-fluent-schema, 'button', 'raised');
$contained-border-radius: border-radius(map.get($contained-schema, 'border-radius')...);
$contained-theme: digest-schema(extend(
    $contained-schema,
    (
        border-radius: $contained-border-radius
    )
));

$fab-schema: map.get($light-fluent-schema, 'button', 'fab');
$fab-border-radius: border-radius(map.get($fab-schema, 'border-radius')...);
$fab-theme: digest-schema(extend(
    $fab-schema,
    (
        border-radius: $fab-border-radius
    )
));

$outlined-schema: map.get($light-fluent-schema, 'button', 'outlined');
$outlined-border-radius: border-radius(map.get($outlined-schema, 'border-radius')...);
$outlined-theme: digest-schema(extend(
    $outlined-schema,
    (
        border-radius: $outlined-border-radius
    )
));
$outline-btn-indent: rem(2px);

:host([variant='flat']) {
    @include css-vars-from-theme($flat-theme, 'ig-button');

    [part='base'] {
        border-radius: var-get($flat-theme, 'border-radius');
    }
}

:host([variant='outlined']) {
    @include css-vars-from-theme($outlined-theme, 'ig-button');

    [part='base'] {
        border-radius: var-get($outlined-theme, 'border-radius');

        &::after {
            border-radius: calc(#{var-get($outlined-theme, 'border-radius')} - #{$outline-btn-indent * 2});
        }
    }
}

:host([variant='contained']) {
    @include css-vars-from-theme($contained-theme, 'ig-button');

    [part='base'] {
        border-radius: var-get($contained-theme, 'border-radius');

        &::after {
            border-radius: calc(#{var-get($contained-theme, 'border-radius')} - #{$outline-btn-indent * 2});
        }
    }
}

:host([variant='fab']) {
    --size: #{sizable(rem(32px), rem(40px), rem(48px))};

    @include css-vars-from-theme($fab-theme, 'ig-button');

    [part='base'] {
        border-radius: var-get($fab-theme, 'border-radius');

        &::after {
            border-radius: calc(#{var-get($fab-theme, 'border-radius')} - #{$outline-btn-indent * 2});
        }
    }
}

:host {
    --size: #{sizable(rem(24px), rem(32px), rem(38px))};
}

[part='base'] {
    padding: 0 pad(8px, 16px, 16px);
    transition: all .1s ease-in-out;
}

:host(:not([disabled])[variant='flat']) [part='base'] {
    color: var-get($flat-theme, 'foreground');
    background: var-get($flat-theme, 'background');
    border: 1px solid var-get($flat-theme, 'border-color');

    &:hover {
        color: var-get($flat-theme, 'hover-foreground');
        background: var-get($flat-theme, 'hover-background');
        border-color: var-get($flat-theme, 'hover-border-color');
    }

    &:focus {
        color: var-get($flat-theme, 'focus-foreground');
        background: var-get($flat-theme, 'focus-background');
        border-color: var-get($flat-theme, 'focus-border-color');
    }

    &:active {
        color: var-get($flat-theme, 'active-foreground');
        background: var-get($flat-theme, 'active-background');
        border-color: var-get($flat-theme, 'active-border-color');
    }

    &:focus-visible {
        color: var-get($flat-theme, 'focus-visible-foreground');
        background: var-get($flat-theme, 'focus-visible-background');
        border-color: var-get($flat-theme, 'focus-visible-border-color');
    }
}

:host(:not([disabled])[variant='outlined']) [part='base'] {
    color: var-get($outlined-theme, 'foreground');
    background: var-get($outlined-theme, 'background');
    border: rem(1px) solid var-get($outlined-theme, 'border-color');

    &:hover {
        color: var-get($outlined-theme, 'hover-foreground');
        background: var-get($outlined-theme, 'hover-background');
        border-color: var-get($outlined-theme, 'hover-border-color');
    }

    &:focus {
        color: var-get($outlined-theme, 'focus-foreground');
        background: var-get($outlined-theme, 'focus-background');
        border-color: var-get($outlined-theme, 'focus-border-color');
    }

    &:active {
        color: var-get($outlined-theme, 'active-foreground');
        background: var-get($outlined-theme, 'active-background');
        border-color: var-get($outlined-theme, 'active-border-color');
    }

    &:focus-visible {
        color: var-get($outlined-theme, 'focus-visible-foreground');
        background: var-get($outlined-theme, 'focus-visible-background');
        border-color: var-get($outlined-theme, 'focus-visible-border-color');

        &::after {
            content: '';
            position: absolute;
            inset-block-start: $outline-btn-indent;
            inset-inline-start: $outline-btn-indent;
            pointer-events: none;
            width: calc(100% - (#{$outline-btn-indent} * 2));
            height: calc(100% - (#{$outline-btn-indent} * 2));
            box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'focus-visible-foreground');
        }

        &:hover {
            color: var-get($outlined-theme, 'hover-foreground');
            background: var-get($outlined-theme, 'hover-background');
            border-color: var-get($outlined-theme, 'hover-border-color');

            &::after {
                box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'hover-foreground');
            }
        }

        &:active {
            color: var-get($outlined-theme, 'active-foreground');
            background: var-get($outlined-theme, 'active-background');
            border-color: var-get($outlined-theme, 'active-border-color');

            &::after {
                box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'active-foreground');
            }
        }
    }
}

:host(:not([disabled])[variant='contained']) [part='base'] {
    color: var-get($contained-theme, 'foreground');
    background: var-get($contained-theme, 'background');
    border: rem(1px) solid var-get($contained-theme, 'border-color');

    &:hover {
        color: var-get($contained-theme, 'hover-foreground');
        background: var-get($contained-theme, 'hover-background');
        border-color: var-get($contained-theme, 'hover-border-color');
    }

    &:focus {
        color: var-get($contained-theme, 'focus-foreground');
        background: var-get($contained-theme, 'focus-background');
        border-color: var-get($contained-theme, 'focus-border-color');
    }

    &:active {
        color: var-get($contained-theme, 'active-foreground');
        background: var-get($contained-theme, 'active-background');
        border-color: var-get($contained-theme, 'active-border-color');
    }

    &:focus-visible {
        color: var-get($contained-theme, 'focus-visible-foreground');
        background: var-get($contained-theme, 'focus-visible-background');
        border-color: var-get($contained-theme, 'focus-visible-border-color');
        position: relative;

        &::after {
            content: '';
            box-shadow: 0 0 0 1px #{contrast-color(primary, 600)};
            position: absolute;
            inset-block-start: 3px;
            inset-inline-start: 3px;
            pointer-events: none;
            width: calc(100% - 6px);
            height: calc(100% - 6px);
        }

        &:hover {
            color: var-get($contained-theme, 'hover-foreground');
            background: var-get($contained-theme, 'hover-background');
            border-color: var-get($contained-theme, 'hover-border-color');
        }

        &:active {
            color: var-get($contained-theme, 'active-foreground');
            background: var-get($contained-theme, 'active-background');
            border-color: var-get($contained-theme, 'active-border-color');
        }
    }
}

:host(:not([disabled])[variant='fab']) [part='base'] {
    color: var-get($fab-theme, 'foreground');
    background: var-get($fab-theme, 'background');
    border: rem(1px) solid var-get($fab-theme, 'border-color');

    &:hover {
        color: var-get($fab-theme, 'hover-foreground');
        background: var-get($fab-theme, 'hover-background');
        border-color: var-get($fab-theme, 'hover-border-color');
    }

    &:focus {
        color: var-get($fab-theme, 'focus-foreground');
        background: var-get($fab-theme, 'focus-background');
        border-color: var-get($fab-theme, 'focus-border-color');
    }

    &:active {
        color: var-get($fab-theme, 'active-foreground');
        background: var-get($fab-theme, 'active-background');
        border-color: var-get($fab-theme, 'active-border-color');
    }

    &:focus-visible {
        color: var-get($fab-theme, 'focus-visible-foreground');
        background: var-get($fab-theme, 'focus-visible-background');
        border-color: var-get($fab-theme, 'focus-visible-border-color');
        position: relative;

        &::after {
            content: '';
            box-shadow: 0 0 0 1px #{contrast-color(primary, 600)};
            position: absolute;
            inset-block-start: 3px;
            inset-inline-start: 3px;
            pointer-events: none;
            width: calc(100% - 6px);
            height: calc(100% - 6px);
        }

        &:hover {
            color: var-get($fab-theme, 'hover-foreground');
            background: var-get($fab-theme, 'hover-background');
            border-color: var-get($fab-theme, 'hover-border-color');
        }

        &:active {
            color: var-get($fab-theme, 'active-foreground');
            background: var-get($fab-theme, 'active-background');
            border-color: var-get($fab-theme, 'active-border-color');
        }
    }
}

:host([disabled][variant='flat']) [part='base'] {
    color: var-get($flat-theme, 'disabled-foreground');
    background: var-get($flat-theme, 'disabled-background');
}

:host([disabled][variant='outlined']) [part='base'] {
    color: var-get($outlined-theme, 'disabled-foreground');
    background: var-get($outlined-theme, 'disabled-background');
    border-color: var-get($outlined-theme, 'disabled-border-color');
}

:host([disabled][variant='contained']) [part='base'] {
    color: var-get($contained-theme, 'disabled-foreground');
    background: var-get($contained-theme, 'disabled-background');
}

:host([disabled][variant='fab']) [part='base'] {
    color: var-get($fab-theme, 'disabled-foreground');
    background: var-get($fab-theme, 'disabled-background');
}
