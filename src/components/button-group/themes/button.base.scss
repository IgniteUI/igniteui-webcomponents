@use 'styles/common/component';
@use 'styles/utilities' as *;

$transition: all 140ms cubic-bezier(0.455, 0.03, 0.515, 0.955);

:host {
    --component-size: var(--ig-size, var(--ig-size-large));
    --_toggle-button-border-size: #{rem(1px)};

    @include type-style(button);

    font-family: var(--ig-font-family);
    display: flex;
    flex: 1 0 0%;
    justify-content: center;
    align-items: center;
    text-decoration: none;
    user-select: none;

    [part~='toggle'] {
        @include type-style(button);
        @include ellipsis();

        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        flex: 1;
        border-style: solid;
        border-width: var(--_toggle-button-border-size);
        box-shadow: none;
        background: transparent;
        color: inherit;
        max-width: 100%;
        transition: $transition;
        position: relative;
        z-index: 0;
        gap: sizable(rem(4px), rem(8px), rem(12px));

        ::slotted(*) {
            max-width: 100%;
        }

        ::slotted(:not(igc-icon)) {
            @include ellipsis();
        }
    }
}

:host-context(:disabled),
:host-context([disabled]),
:host(:disabled),
:host([disabled]) {
    cursor: default;
    pointer-events: none;
}

:host([selected]:disabled),
:host([selected][disabled]) {
    [part~='toggle'] {
        &::before {
            position: absolute;
            content: '';
            inset: 0;
            z-index: 3;

            // this is implemented the same way as in igniteui-angular
            background: color($color: 'gray', $variant: 500, $opacity: .12);
        }
    }
}

:host(:focus-within),
:host(:focus) {
    [part~='toggle'] {
        outline: none;
    }
}

:host([selected]) {
    [part~='toggle'] {
        z-index: 1;
    }
}

:host(:not(:first-child)) {
    margin-inline-start: var(--_negative-margin-horizontal, 0);
    margin-block-start: var(--_negative-margin-vertical, 0);
}

:host(:not(:first-child) :not(:last-child)) {
    [part~='toggle'] {
        border-radius: 0;
    }
}

// Radius variables are coming from the individual themes inside the button-group since they relay on the
// alignment of the group
:host(:first-child) {
    [part~='toggle'] {
        // Top left radius
        // depending on which mode is selected it will use the horizontal or vertical radius
        border-start-start-radius: var(--vertical-radius, var(--horizontal-radius, 0));

        // Bottom left radius (only in horizontal mode) else it is 0
        border-end-start-radius: var(--horizontal-radius, 0);

        // Top right radius (only in vertical mode) else it is 0
        border-start-end-radius: var(--vertical-radius, 0);
    }
}

:host(:last-child) {
    [part~='toggle'] {
        // Top right radius (only in horizontal mode) else it is 0
        border-start-end-radius: var(--horizontal-radius, 0);

        // Bottom right radius
        // depending on which mode is selected it will use the horizontal or vertical radius
        border-end-end-radius: var(--vertical-radius, var(--horizontal-radius, 0));

        // Bottom left radius (only in vertical mode) else it is 0
        border-end-start-radius: var(--vertical-radius, 0);
    }
}
