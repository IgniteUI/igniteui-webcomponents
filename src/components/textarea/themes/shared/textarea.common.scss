@use 'styles/utilities' as *;
@use '../light/themes' as *;

$theme: $base;

[part~='prefixed'] {
    [part~='prefix'] {
        color: var-get($theme, 'input-prefix-color');
        background: var-get($theme, 'input-prefix-background');
    }
}

[part~='suffixed'] {
    [part~='suffix'] {
        color: var-get($theme, 'input-suffix-color');
        background: var-get($theme, 'input-suffix-background');
    }
}

[part~='input'] {
    color: var-get($theme, 'idle-text-color');
}

[part~='filled'] {
    [part~='input'] {
        color: var-get($theme, 'filled-text-color');
    }

    [part~='prefix'] {
        color: var-get($theme, 'input-prefix-color--filled');
        background: var-get($theme, 'input-prefix-background--filled');
    }

    [part~='suffix'] {
        color: var-get($theme, 'input-suffix-color--filled');
        background: var-get($theme, 'input-suffix-background--filled');
    }
}

[part~='label'] {
    color: var-get($theme, 'idle-secondary-color');
}

textarea {
    background: transparent;
    color: var-get($theme, 'filled-text-color');

    &::placeholder {
        color: var-get($theme, 'placeholder-color');
    }
}

:host {
    ::part(helper-text) {
        color: var-get($theme, 'helper-text-color');
        margin-block-start: pad-block(rem(4px));
    }
}

:host([readonly]) {
    [part='prefix'],
    [part='suffix'] {
        color: var-get($theme, 'disabled-text-color');
    }
}

:host(:not([readonly]):hover),
:host(:focus) {
    textarea {
        &::placeholder {
            color: var-get($theme, 'hover-placeholder-color');
        }
    }
}

:host(:not([readonly]):hover) {
    [part~='filled'] {
        [part~='input'] {
            color: var-get($theme, 'filled-text-hover-color');
        }
    }
}

:host(:not([readonly]):focus-within) {
    [part~='prefix'],
    [part~='filled'][part~='prefix'] {
        color: var-get($theme, 'input-prefix-color--focused');
        background: var-get($theme, 'input-prefix-background--focused');
    }

    [part~='suffix'],
    [part~='filled'][part~='suffix'] {
        color: var-get($theme, 'input-suffix-color--focused');
        background: var-get($theme, 'input-suffix-background--focused');
    }

    [part~='filled'] {
        [part~='input'] {
            color: var-get($theme, 'focused-text-color');
        }
    }
}

:host(:not([disabled],[readonly]):state(ig-invalid)),
:host(:not(:disabled,[readonly]):state(ig-invalid)) {
    ::part(helper-text) {
        color: var-get($theme, 'error-secondary-color');
    }
}

:host(:disabled),
:host([disabled]) {
    color: var-get($theme, 'disabled-text-color');

    [part='prefix'],
    [part='suffix'] {
        color: var-get($theme, 'disabled-text-color');
        background: inherit;
    }

    ::part(helper-text) {
        color: var-get($theme, 'disabled-text-color');
    }

    textarea {
        color: var-get($theme, 'disabled-text-color');

        &::placeholder {
            color: var-get($theme, 'disabled-placeholder-color');
        }
    }

    [part~='label'] {
        color: var-get($theme, 'disabled-text-color');
    }
}

::slotted([slot='suffix']),
::slotted([slot='prefix']) {
    padding-inline: var(--affix-padding);
}
