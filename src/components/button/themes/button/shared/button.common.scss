@use 'styles/utilities' as *;
@use '../light/themes' as *;

$flat-theme: $material-flat;
$contained-theme: $material-contained;
$fab-theme: $material-fab;
$outlined-theme: $material-outlined;

/* stylelint-disable */
:host([variant='flat']) [part~='base'] {
    border-radius: var-get($flat-theme, 'border-radius');
    height: var-get($flat-theme, 'size');
    border: rem(1px) solid var-get($flat-theme, 'border-color');
}

:host([variant='outlined']) [part~='base'] {
    border-radius: var-get($outlined-theme, 'border-radius');
    height: var-get($outlined-theme, 'size');
    border: rem(1px) solid var-get($outlined-theme, 'border-color');
}

:host([variant='contained']) [part~='base'] {
    border-radius: var-get($contained-theme, 'border-radius');
    height: var-get($contained-theme, 'size');
    border: rem(1px) solid var-get($contained-theme, 'border-color');
}

:host([variant='fab']) [part~='base'] {
    border: rem(1px) solid var-get($fab-theme, 'border-color');
    border-radius: var-get($fab-theme, 'border-radius');
    min-height: var-get($fab-theme, 'size');
    min-width: var-get($fab-theme, 'size');
    padding: 0 pad(6px, 10px, 14px);
}
/* stylelint-enable */

[part~='base'] {
    transition: all .15s ease-in-out;

    ::slotted(igc-icon) {
        color: var-get($flat-theme, 'icon-color');
        transition: all .15s ease-in-out;
    }
}

:host(:not([disabled])[variant='flat']) [part~='base'],
:host(:not(:disabled)[variant='flat']) [part~='base'] {
    color: var-get($flat-theme, 'foreground');
    background: var-get($flat-theme, 'background');

    ::slotted(igc-icon) {
        color: var-get($flat-theme, 'icon-color');
    }

    &:hover {
        color: var-get($flat-theme, 'hover-foreground');
        background: var-get($flat-theme, 'hover-background');

        ::slotted(igc-icon) {
            color: var-get($flat-theme, 'icon-color-hover');
        }
    }

    &:focus-visible {
        color: var-get($flat-theme, 'focus-visible-foreground');
        background: var-get($flat-theme, 'focus-visible-background');

        ::slotted(igc-icon) {
            color: var-get($flat-theme, 'icon-color');
        }

        &:hover {
            color: var-get($flat-theme, 'focus-hover-foreground');
            background: var-get($flat-theme, 'focus-hover-background');

            ::slotted(igc-icon) {
                color: var-get($flat-theme, 'icon-color-hover');
            }
        }

        &:active {
            color: var-get($flat-theme, 'focus-foreground');
            background: var-get($flat-theme, 'focus-background');
        }
    }

    &:active {
        color: var-get($flat-theme, 'active-foreground');
        background: var-get($flat-theme, 'active-background');
    }
}

:host(:not([disabled])[variant='outlined']) [part~='base'],
:host(:not(:disabled)[variant='outlined']) [part~='base'] {
    color: var-get($outlined-theme, 'foreground');
    background: var-get($outlined-theme, 'background');

    ::slotted(igc-icon) {
        color: var-get($outlined-theme, 'icon-color');
    }

    &:hover {
        color: var-get($outlined-theme, 'hover-foreground');
        background: var-get($outlined-theme, 'hover-background');

        ::slotted(igc-icon) {
            color: var-get($outlined-theme, 'icon-color-hover');
        }
    }

    &:focus-visible {
        color: var-get($outlined-theme, 'focus-visible-foreground');
        background: var-get($outlined-theme, 'focus-visible-background');

        ::slotted(igc-icon) {
            color: var-get($outlined-theme, 'icon-color');
        }

        &:hover {
            color: var-get($outlined-theme, 'focus-hover-foreground');
            background: var-get($outlined-theme, 'focus-hover-background');

            ::slotted(igc-icon) {
                color: var-get($outlined-theme, 'icon-color-hover');
            }
        }

        &:active {
            color: var-get($outlined-theme, 'focus-foreground');
            background: var-get($outlined-theme, 'focus-background');
            border-color: var-get($outlined-theme, 'focus-border-color');
        }
    }

    &:active {
        color: var-get($outlined-theme, 'active-foreground');
        background: var-get($outlined-theme, 'active-background');
    }
}

:host(:not([disabled])[variant='contained']) [part~='base'],
:host(:not(:disabled)[variant='contained']) [part~='base'] {
    color: var-get($contained-theme, 'foreground');
    background: var-get($contained-theme, 'background');

    ::slotted(igc-icon) {
        color: var-get($contained-theme, 'icon-color');
    }

    &:hover {
        color: var-get($contained-theme, 'hover-foreground');
        background: var-get($contained-theme, 'hover-background');

        ::slotted(igc-icon) {
            color: var-get($contained-theme, 'icon-color-hover');
        }
    }

    &:focus-visible {
        color: var-get($contained-theme, 'focus-visible-foreground');
        background: var-get($contained-theme, 'focus-visible-background');

        ::slotted(igc-icon) {
            color: var-get($contained-theme, 'icon-color');
        }

        &:hover {
            color: var-get($contained-theme, 'focus-hover-foreground');
            background: var-get($contained-theme, 'focus-hover-background');

            ::slotted(igc-icon) {
                color: var-get($contained-theme, 'icon-color-hover');
            }
        }

        &:active {
            color: var-get($contained-theme, 'focus-foreground');
            background: var-get($contained-theme, 'focus-background');
        }
    }

    &:active {
        color: var-get($contained-theme, 'active-foreground');
        background: var-get($contained-theme, 'active-background');
    }
}

:host(:not([disabled])[variant='fab']) [part~='base'],
:host(:not(:disabled)[variant='fab']) [part~='base'] {
    color: var-get($fab-theme, 'foreground');
    background: var-get($fab-theme, 'background');

    ::slotted(igc-icon) {
        color: var-get($fab-theme, 'icon-color');
    }

    &:hover {
        color: var-get($fab-theme, 'hover-foreground');
        background: var-get($fab-theme, 'hover-background');

        ::slotted(igc-icon) {
            color: var-get($fab-theme, 'icon-color-hover');
        }
    }

    &:focus-visible {
        color: var-get($fab-theme, 'focus-visible-foreground');
        background: var-get($fab-theme, 'focus-visible-background');

        ::slotted(igc-icon) {
            color: var-get($fab-theme, 'icon-color');
        }

        &:hover {
            color: var-get($fab-theme, 'focus-hover-foreground');
            background: var-get($fab-theme, 'focus-hover-background');

            ::slotted(igc-icon) {
                color: var-get($fab-theme, 'icon-color-hover');
            }
        }

        &:active {
            color: var-get($fab-theme, 'focus-foreground');
            background: var-get($fab-theme, 'focus-background');
        }
    }

    &:active {
        color: var-get($fab-theme, 'active-foreground');
        background: var-get($fab-theme, 'active-background');
    }
}

:host([disabled][variant='flat']) [part~='base'],
:host(:disabled[variant='flat']) [part~='base'] {
    color: var-get($flat-theme, 'disabled-foreground');
    background: var-get($flat-theme, 'disabled-background');

    ::slotted(igc-icon) {
        color: var-get($flat-theme, 'disabled-icon-color');
    }
}

:host([disabled][variant='outlined']) [part~='base'],
:host(:disabled[variant='outlined']) [part~='base'] {
    color: var-get($outlined-theme, 'disabled-foreground');
    background: var-get($outlined-theme, 'disabled-background');
    border: rem(1px) solid var-get($outlined-theme, 'disabled-border-color');

    ::slotted(igc-icon) {
        color: var-get($outlined-theme, 'disabled-icon-color');
    }
}

:host([disabled][variant='contained']) [part~='base'],
:host(:disabled[variant='contained']) [part~='base'] {
    color: var-get($contained-theme, 'disabled-foreground');
    background: var-get($contained-theme, 'disabled-background');

    ::slotted(igc-icon) {
        color: var-get($contained-theme, 'disabled-icon-color');
    }
}

:host([disabled][variant='fab']) [part~='base'],
:host(:disabled[variant='fab']) [part~='base'] {
    color: var-get($fab-theme, 'disabled-foreground');
    background: var-get($fab-theme, 'disabled-background');

    ::slotted(igc-icon) {
        color: var-get($fab-theme, 'disabled-icon-color');
    }
}
