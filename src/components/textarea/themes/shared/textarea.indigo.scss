@use 'styles/utilities' as *;
@use '../light/themes' as *;
@use 'igniteui-theming/sass/animations/easings' as *;

$theme: $indigo;

:host {
    @include type-style('body-2');

    --component-size: var(--ig-size, #{var-get($theme, 'default-size')});
    --input-icon: #{sizable(rem(14px), rem(16px), rem(16px))};
    --affix-padding: #{pad-inline(rem(2px), rem(4px), rem(6px))};

    ::slotted(igc-icon) {
        --size: var(--input-icon) !important;
    }

    ::part(helper-text) {
        grid-auto-rows: minmax(rem(15px), auto);
    }

}

:host(:not([readonly], :focus-within):hover) {
    [part~='container'] {
        background: var-get($theme, 'box-background-hover');

        &::after {
            border-color: var-get($theme, 'hover-bottom-line-color');
        }
    }

    textarea {
        color: var-get($theme, 'filled-text-hover-color');
    }
}

:host(:focus-within),
:host([readonly]:focus-within) {
    [part~='label'] {
        color: var-get($theme, 'focused-secondary-color');
    }

    [part~='container'] {
        background: var-get($theme, 'box-background-hover');
        caret-color: var-get($theme, 'focused-bottom-line-color');

        &::after {
            border-block-end-color: var-get($theme, 'focused-bottom-line-color');
            transition: all .25s $out-cubic;
        }
    }

    textarea {
        color: var-get($theme, 'focused-text-color');
    }
}

[part~='label'] {
    @include type-style('caption');

    display: block;
    position: static;
    transform: translateY(0);
    transform-origin: top left;
    margin-top: 0;
    height: auto;
    margin-block-end: pad-block(rem(4px));
}

[part~='container'] {
    border-start-start-radius: var-get($theme, 'box-border-radius');
    border-start-end-radius: var-get($theme, 'box-border-radius');
    transition: background .25s $out-cubic;
    overflow: hidden;
    padding-inline-start: 0;

    &::after {
        content: '';
        position: absolute;
        bottom: 0%;
        width: 100%;
        border-block-end: rem(1px) solid var-get($theme, 'idle-bottom-line-color');
        transition: all .25s $out-cubic;
    }
}

textarea {
    @include type-style('body-2');

    padding-block: pad-block(rem(4px), rem(6px), rem(8px)) 0;
    padding-inline: pad-inline(rem(2px), rem(4px), rem(6px));
    margin-block-end: pad-block(rem(1px));

    &::placeholder {
        font-style: italic;
    }
}

[part~='filled'] {
    [part~='input'] {
        color: var-get($theme, 'filled-text-color');
    }
}

[part~='prefixed'] textarea {
    padding-inline-start: 0;
}

[part~='suffixed'] textarea {
    padding-inline-end: 0;
}

[part~='prefixed'] {
    [part~='prefix'] {
        border-start-start-radius: var-get($theme, 'border-border-radius');
    }
}

[part~='suffixed'] {
    [part~='suffix'] {
        border-start-end-radius: var-get($theme, 'border-border-radius');
    }
}

[part~='prefixed'] [part~='prefix'],
[part~='suffixed'] [part~='suffix'] {
    height: calc(100% - #{rem(1px)});
}

:host([readonly]) {
    [part~='container']::after {
        border-block-end-color: var-get($theme, 'disabled-text-color');
    }
}

:host(:not(:disabled,[readonly]):state(ig-invalid)),
:host(:not([disabled],[readonly]):state(ig-invalid)) {
    ::part(validation-icon) {
        color: #{var-get($theme, 'error-secondary-color')};
    }

    [part~='container'] {
        caret-color: initial;

        &::after {
            border-block-end: rem(1px) solid var-get($theme, 'error-secondary-color');
        }
    }

    ::part(helper-text) {
        color: var-get($theme, 'helper-text-color');
    }
}

:host(:disabled),
:host([disabled]) {
    [part~='container'] {
        background: transparent;

        &::after {
            border-block-end-color: var-get($theme, 'disabled-bottom-line-color');
        }
    }
}
