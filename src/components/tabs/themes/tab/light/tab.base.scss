@use '../../../../../styles/common/component';
@use '../../../../../styles/utilities' as *;

$hover-background: var(--hover-background, color(gray, 200)) !default;

[part~='header'] {
  display: inline-flex;
  flex-shrink: 0;
  justify-content: center;
  align-items: center;
  min-width: rem(90px);
  max-width: rem(360px);
  word-wrap: break-word;
  padding: rem(12px) rem(16px);
  overflow: hidden;
  pointer-events: all;
  cursor: pointer;
  position: relative;
  transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);
  user-select: none;
  background: color(surface, 500);
  color: color(gray, 700);
}

[part='header'] {
  &:hover,
  &:focus-within {
    background: $hover-background;
    color: color(gray, 700);
  }
}

:host([selected]) {
  [part='header'] {
    color: color(primary, 500);

    ::slotted(igc-icon) {
      color: color(primary, 500);
    }
  }
}

:host([selected]) {
  [part='header'] {
    &:hover,
    &:focus-within {
      color: color(primary, 500);
    }
  }
}

:host([disabled]) {
  [part='header'] {
    pointer-events: none;
    cursor: initial;
    color: color(gray, 500);
  }
}

[part='base'] {
  display: flex;
  grid-row: var(--header-bottom, 1);
  align-items: center;
  justify-content: space-between;
  outline-style: none;
  gap: rem(8px);
  pointer-events: none;

  ::slotted(igc-icon) {
    --size: #{rem(24px)};
  }
}

[part='title'] {
  @include type-style('button');

  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  text-align: center;
  outline-style: none;

  ::slotted(*) {
    @include line-clamp(2, true, true);
  }

  ::slotted(igc-icon:not(:only-child)) {
    margin-bottom: rem(8px);
  }
}

// body

[part~='body'] {
  display: var(
    --vertical-body-disply--last-of-type,
    var(--vertical-body-disply, none)
  );
  grid-row-start: var(--body-top, 2);
  grid-column: span var(--tabs-count);
  margin-inline-start: calc(var(--body-indent--vertical) / 2);
  padding-inline-start: var(
    --horizontal-body-padding,
    #{calc(var(--body-indent--vertical) / 2)}
  );
  padding-inline-end: var(
    --horizontal-body-padding,
    var(--vertical-body-padding)
  );
  padding-block-start: var(
    --horizontal-body-padding,
    var(--vertical-body-padding)
  );
  padding-block-end: var(
    --horizontal-body-padding,
    var(--vertical-body-padding)
  );
  z-index: 1;
  position: relative;
  color: color(gray, 900);

  // Thous two lines here are on purpose, they make sure that tab body content
  // does not get involved in grid width calculation. They fix a very weird bug.
  // https://stackoverflow.com/questions/73856035/css-grid-columns-changing-size-with-long-content/73858982#73858982
  width: 0;
  min-width: 100%;
}

[part='content'] {
  display: var(--horizontal-content-disply, none);
}

:host([selected]) {
  [part~='body'] {
    display: var(--vertical-body-disply, block);
    margin-left: var(--margin-left);
    &::before {
      inset-block-start: 0;
    }
  }

  [part='content'] {
    display: var(--horizontal-content-disply, block);
    pointer-events: all;
  }
}
