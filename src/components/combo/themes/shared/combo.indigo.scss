@use 'styles/utilities' as *;
@use '../light/themes' as *;
@use 'components/input/themes/light/themes' as input-theme;
@use 'components/dropdown/themes/light/themes' as dropdown-theme;

$theme: $indigo;
$input-theme: input-theme.$indigo;
$dropdown-theme: dropdown-theme.$indigo;

:host {
    --component-size: var(--ig-size, #{var-get($theme, 'default-size')});
    --input-icon: #{sizable(rem(14px), rem(16px), rem(18px))};
    --combo-size: var(--component-size);

    igc-input::part(container) {
        padding-inline: 0;
    }

    ::part(helper-text) {
        @include type-style('caption');

        margin-block-start: pad-block(rem(4px));
        grid-auto-rows: minmax(rem(15px), auto);
    }

    igc-icon,
    ::slotted(igc-icon) {
        --size: var(--input-icon) !important;
    }
}

[part='case-icon'] {
    color: color(gray, 600);
}

[part='case-icon active'] {
    color: color(gray, 900);
}

:host(:not([single-select])) {
    > igc-input::part(input) {
        &::selection {
            background: transparent;
        }
    }
}

[part='list-wrapper'] {
    background: var-get($dropdown-theme, 'background-color');
    border-radius: var-get($dropdown-theme, 'border-radius');
    outline: var-get($dropdown-theme, 'border-width') solid var-get($dropdown-theme, 'border-color');
    padding: pad(rem(3px));

    igc-input {
        --ig-theme: indigo;
        --ig-size: var(--ig-size-medium);
    }

    igc-input::part(input) {
        &::selection {
            background: color(primary, 100);
        }
    }

    [part='case-icon active'] {
        color: color(primary, 500);
    }
}

[part='list'] {
    min-height: calc(var(--size) * var(--item-count) + rem(16px)) !important;
}

[part='filter-input'] {
    padding: pad-inline(rem(12px));
}

:host(:focus-within) {
    igc-input::part(label) {
        color: var-get($input-theme, 'focused-secondary-color');
    }
}

:host(:hover),
:host(:focus-within) {
    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-focus--border');
        color: var-get($theme, 'toggle-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }

    [part~='clear-icon'] {
        background: var-get($theme, 'clear-button-background-focus');
        color: var-get($theme, 'clear-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }
}

:host(:not([disabled]):state(ig-invalid)),
:host(:not(:disabled):state(ig-invalid)) {
    ::part(helper-text) {
        color: var-get($input-theme, 'helper-text-color');
    }
}

:host(:disabled),
:host([disabled]) {
    ::slotted([slot='prefix']),
    ::slotted([slot='suffix']),

    igc-input::part(input)::selection {
        background: transparent;
    }

    [part~='clear-icon'] {
        background: inherit;
        color: var-get($theme, 'disabled-text-color');

        igc-icon {
            color: inherit;
        }
    }

    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-disabled');
        color: var-get($theme, 'toggle-button-foreground-disabled');

        igc-icon {
            color: inherit;
        }
    }
}
