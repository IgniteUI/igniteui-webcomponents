@use 'styles/utilities' as *;
@use '../../light/checkbox/themes' as *;

$theme: $indigo;
$fill-color: var-get($theme, 'fill-color');
$fill-color-hover: var-get($theme, 'fill-color-hover');
$empty-color: var-get($theme, 'empty-color');
$disabled-color: var-get($theme, 'disabled-color');
$disabled-indeterminate-color: var-get($theme, 'disabled-indeterminate-color');
$error-color: var-get($theme, 'error-color');
$error-color-hover: var-get($theme, 'error-color-hover');

:host {
    font-weight: 600;

    ::part(helper-text) {
        @include type-style('caption');

        margin-block-start: pad-block(rem(16px));
        grid-auto-rows: minmax(rem(18px), auto);
    }
}

[part~='control'] {
    --size: #{rem(16px)};

    border-radius: var-get($theme, 'border-radius-ripple');

    &::after {
        border-radius: var-get($theme, 'border-radius');
        border: rem(2px) solid $empty-color;
    }
}

[part='control checked']::after {
    border-color: $fill-color;
    background: $fill-color;
}

[part~='indicator'] {
    --indicator-size: #{rem(13px)};

    stroke: unset;
    stroke-linecap: unset;
    stroke-width: unset;
    stroke-dasharray: unset;
    stroke-dashoffset: unset;
    fill: var-get($theme, 'tick-color');
    transition: none;

    rect {
        fill: none;
    }
}

[part='indicator checked'] {
    transition-duration: .15s;
}

:host(:hover) {
    [part='control'] {
        &::after {
            border-color: var-get($theme, 'empty-color-hover');
        }
    }

    [part='control checked']::after {
        border-color: var-get($theme, 'fill-color-hover');
    }
}

:host(:focus-visible),
[part='base focused'] {
    [part~='control'] {
        box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color');
    }
}

:host(:focus-visible),
[part='base checked focused'] {
    [part='control checked'] {
        box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-focused');
    }
}

:host([indeterminate]) {
    [part~='indicator'] {
        fill: none;
        stroke-dashoffset: unset;
        transform: scale(.8);

        rect {
            fill: var-get($theme, 'tick-color');
            opacity: 1;
        }
    }

    [part~='control'] {
        &::after {
            background: $fill-color;
            border-color: $fill-color;
        }
    }
}

:host([indeterminate]:hover) {
    [part~='control'] {
        &::after {
            background: $fill-color-hover;
            border-color: $fill-color-hover;
        }
    }
}

:host([indeterminate]:focus-visible) {
    [part~='control'] {
        box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-focused');
    }
}

:host(:not([disabled]):state(ig-invalid)),
:host(:not(:disabled):state(ig-invalid)) {
    [part~='label'] {
        color: var-get($theme, 'label-color');
    }

    [part~='control'] {
        &::after {
            border-color: $error-color;
        }
    }

    [part='control checked'] {
        border-color: $error-color;
        background: $error-color;

        &::after {
            background: $error-color;
        }
    }

    [part='base focused'],
    &:focus-visible,
    [part='base checked focused'] {
        [part~='control'],
        [part='control checked'] {
            box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-error');
        }
    }
}

:host(:not([disabled]):state(ig-invalid)[indeterminate]),
:host(:not(:disabled):state(ig-invalid)[indeterminate]) {
    [part~='control'] {
        border-color: $error-color;

        &::after {
            background: $error-color;
        }
    }

    [part='base focused'] {
        [part~='control'] {
            box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-error');
        }
    }
}

:host(:hover:not([disabled]):state(ig-invalid)),
:host(:hover:not(:disabled):state(ig-invalid)),
:host(:hover:not([disabled]):state(ig-invalid)[indeterminate]),
:host(:hover:not(:disabled):state(ig-invalid)[indeterminate]) {
    [part~='label'] {
        color: var-get($theme, 'label-color-hover');
    }

    [part~='control'],
    [part='control checked'] {
        &::after {
            border-color: $error-color-hover;
        }
    }

    [part='control checked'] {
        &::after {
            background: $error-color-hover;
        }
    }
}

:host(:hover:not([disabled]):state(ig-invalid)[indeterminate]),
:host(:hover:not(:disabled):state(ig-invalid)[indeterminate]) {
    [part~='control'] {
        &::after {
            background: $error-color-hover;
        }
    }
}

:host([disabled]),
:host(:disabled) {
    [part~='control'] {
        &::after {
            border-color: $disabled-color;
        }
    }

    [part='control checked']::after {
        background: $disabled-indeterminate-color;
        border-color: transparent;
    }

    [part~='indicator'] {
        stroke: unset;
        fill: var-get($theme, 'disabled-tick-color');
    }
}

:host([disabled][indeterminate]),
:host(:disabled[indeterminate]) {
    [part~='control']::after {
        background: $disabled-indeterminate-color;
        border-color: transparent;
    }

    [part~='indicator'] {
        fill: none;

        rect {
            fill: var-get($theme, 'disabled-tick-color');
        }
    }
}
