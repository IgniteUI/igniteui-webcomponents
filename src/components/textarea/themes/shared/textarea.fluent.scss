@use 'styles/utilities' as *;
@use '../light/themes' as *;

$theme: $fluent;
$border-size: rem(1px);

:host {
    @include type-style('body-2');

    --component-size: var(--ig-size, #{var-get($theme, 'default-size')});
    --textarea-border-size: #{rem(1px)};
    --affix-padding: #{pad-inline(rem(8px), rem(10px), rem(14px))};

    ::part(helper-text) {
        grid-auto-rows: minmax(rem(18px), auto);
        margin-block-start: pad-block(rem(5px));
    }
}

[part~='label'] {
    @include type-style('subtitle-2') {
        --ig-subtitle-2-line-height: #{rem(16px)};

        margin-block: 0 pad-block(rem(5px));
    };

    display: block;
    position: static;
    transform: translateY(0);
    transform-origin: top left;
    height: auto;
}

[part~='container'] {
    position: relative;
    background: var-get($theme, 'border-background');
    border: var(--textarea-border-size) solid transparent;
    align-items: stretch;
    border-radius: var-get($theme, 'border-border-radius');

    &::before {
        content: '';
        position: absolute;
        inset: calc(var(--textarea-border-size) * -1);
        width: calc(100% + (var(--textarea-border-size) * 2));
        height: calc(100% + (var(--textarea-border-size) * 2));
        box-shadow: inset 0 0 0 var(--textarea-border-size) var-get($theme, 'border-color');
        border-radius: var-get($theme, 'border-border-radius');
        user-select: none;
        pointer-events: none;
        z-index: 1;
    }
}


:host(:not([readonly], :focus-within):hover) {
    [part~='container'] {
        &::before {
            box-shadow: inset 0 0 0 var(--textarea-border-size) var-get($theme, 'hover-border-color');
        }
    }
}

:host(:focus-within) {
    [part~='container'] {
        &::before {
            box-shadow: inset 0 0 0 calc(var(--textarea-border-size) + #{rem(1px)}) var-get($theme, 'focused-border-color');
        }
    }
}

:host([readonly]) {
    [part='prefix'],
    [part='suffix'] {
        background: transparent;
    }
}

textarea {
    @include type-style('body-2');

    padding-inline: pad-inline(rem(8px));
    padding-block: pad-block(rem(6px), rem(10px), rem(14px)) 0;
}

:host([required]:not(:disabled)),
:host([required]:not([disabled])) {
    [part~='label'] {
        &::after {
            color: var-get($theme, 'error-secondary-color');
        }
    }
}

:host(:not(:disabled,[readonly]):state(ig-invalid)),
:host(:not([disabled],[readonly]):state(ig-invalid)) {
    [part~='container'] {
        &::before {
            box-shadow: inset 0 0 0 var(--textarea-border-size) var-get($theme, 'error-secondary-color')
        }
    }
}

:host(:not(:disabled,[readonly]):state(ig-invalid):focus-within),
:host(:not([disabled],[readonly]):state(ig-invalid):focus-within) {
    [part^='container'] {
        &::before {
            box-shadow: inset 0 0 0 calc(var(--textarea-border-size) + #{rem(1px)}) var-get($theme, 'error-secondary-color');
        }
    }
}

:host(:disabled),
:host([disabled]) {
    [part~='container'] {
        background: var-get($theme, 'border-disabled-background');

        &::before {
            box-shadow: inset 0 0 0 var(--textarea-border-size) var-get($theme, 'disabled-border-color');
        }
    }
}
