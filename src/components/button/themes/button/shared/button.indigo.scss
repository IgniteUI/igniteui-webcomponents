@use 'styles/utilities' as *;
@use '../light/themes' as *;

$flat-theme: $indigo-flat;
$contained-theme: $indigo-contained;
$fab-theme: $indigo-fab;
$outlined-theme: $indigo-outlined;

:host [part='base']{
    min-width: rem(28px);
    padding: 0 pad(10px, 16px, 24px);
    
    ::slotted(igc-icon) {
        --component-size: var(--ig-size-medium) !important;
    }
}

:host([variant='flat']) {
    --component-size: var(--ig-size, #{var-get($flat-theme, 'default-size')});
    --gap: #{sizable(rem(4px), rem(8px), rem(8px))};
}

:host([variant='outlined']) {
    --component-size: var(--ig-size, #{var-get($outlined-theme, 'default-size')});
    --gap: #{sizable(rem(4px), rem(8px), rem(8px))};
}

:host([variant='contained']) {
    --component-size: var(--ig-size, #{var-get($contained-theme, 'default-size')});
    --gap: #{sizable(rem(4px), rem(8px), rem(8px))};
}

:host([variant='fab']) {
    --component-size: var(--ig-size, #{var-get($fab-theme, 'default-size')});

    [part='base'] {
        padding: 0 pad(rem(6px), rem(8px), rem(10px));
    }
}

:host([variant='flat']),
:host([variant='contained']),
:host([variant='outlined']) {
    [part='base'] {
        border-width: rem(2px);
    }
}

:host(:not([disabled])[variant='flat']) [part='base'],
:host(:not(:disabled)[variant='flat']) [part='base'] {
    &:focus-visible {
        box-shadow: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color');
    }
}

:host(:not([disabled])[variant='outlined']) [part='base'],
:host(:not(:disabled)[variant='outlined']) [part='base'] {
    &:hover {
        border-color: var-get($outlined-theme, 'hover-border-color');
    }

    &:focus {
        border-color: var-get($outlined-theme, 'focus-border-color');

        &:hover {
            border-color: var-get($outlined-theme, 'hover-border-color');
        }
    }

    &:active {
        border-color: var-get($outlined-theme, 'active-border-color');
    }

    &:focus-visible {
        border-color: var-get($outlined-theme, 'focus-visible-border-color');
        box-shadow: 0 0 0 rem(3px) var-get($outlined-theme, 'shadow-color');

        &:hover {
            border-color: var-get($outlined-theme, 'hover-border-color');
        }

        &:active {
            color: var-get($outlined-theme, 'active-foreground');
            background: var-get($outlined-theme, 'active-background');
            border-color: var-get($outlined-theme, 'active-border-color');
        }
    }
}

:host(:not([disabled])[variant='contained']) [part='base'],
:host(:not(:disabled)[variant='contained']) [part='base'] {
    &:hover {
        border-color: var-get($contained-theme, 'hover-border-color');
    }

    &:focus {
        border-color: var-get($contained-theme, 'focus-border-color');

        &:hover {
            border-color: var-get($contained-theme, 'hover-border-color');
        }
    }

    &:active {
        border-color: var-get($contained-theme, 'active-border-color');
    }

    &:focus-visible {
        box-shadow: 0 0 0 rem(3px) var-get($contained-theme, 'shadow-color');
        background: var-get($contained-theme, 'focus-visible-background');
        color: var-get($contained-theme, 'focus-visible-foreground');
        border-color: var-get($contained-theme, 'focus-visible-border-color');

        &:hover {
            border-color: var-get($contained-theme, 'hover-border-color');
        }

        &:active {
            color: var-get($contained-theme, 'active-foreground');
            background: var-get($contained-theme, 'active-background');
            border-color: var-get($contained-theme, 'active-border-color');
        }
    }
}

:host(:not([disabled])[variant='fab']) [part='base'],
:host(:not(:disabled)[variant='fab']) [part='base'] {
    border-color: var-get($fab-theme, 'border-color');
    min-width: var(--size);
    min-height: var(--size);

    &:hover {
        border-color: var-get($fab-theme, 'hover-border-color');
    }

    &:focus {
        border-color: var-get($fab-theme, 'focus-border-color');

        &:hover {
            border-color: var-get($fab-theme, 'hover-border-color');
        }
    }

    &:active {
        border-color: var-get($fab-theme, 'active-border-color');
    }

    &:focus-visible {
        border-color: var-get($fab-theme, 'focus-visible-border-color');
        box-shadow: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color');

        &:hover {
            border-color: var-get($fab-theme, 'hover-border-color');
        }

        &:active {
            border-color: var-get($fab-theme, 'active-border-color');
        }
    }
}

:host([disabled][variant='outlined']) [part='base'],
:host(:disabled[variant='outlined']) [part='base'] {
    border-color: var-get($outlined-theme, 'disabled-border-color');
    border-width: rem(2px);
}
