@use 'styles/utilities' as *;
@use '../../light/switch/themes' as *;

$theme: $indigo;
$checked-color: var-get($theme, 'track-on-color') !default;
$border-width: rem(1px);

:host {
    --size: #{rem(32px)};
    --thumb-size: #{rem(8px)};
    --border-size: #{rem(1px)};
    --thumb-offset: #{rem(2px)};
    --label-gap: #{rem(8px)};

    font-weight: 600;
}

[part~='label'] {
    @include type-style('body-2');
}

:host(:hover) {
    [part~='control'] {
        border-color: var-get($theme, 'border-hover-color');
    }

    [part~='thumb']:not([part~='checked']) {
        background: var-get($theme, 'border-hover-color');
    }

    [part~='control'][part~='checked'] {
        background: var-get($theme, 'track-on-hover-color');
        border-color: var-get($theme, 'border-on-hover-color');
    }
}

[part~='control'][part~='focused'] {
    box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color');
}

[part~='control'][part~='checked'][part~='focused'] {
    box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-focused');
}

[part~='control'] {
    border-radius: var-get($theme, 'border-radius-track');
    width: var(--size);
    height: rem(16px);
    border: rem(2px) solid var-get($theme, 'border-color');
    background: var-get($theme, 'track-off-color');
}

[part~='control'][part~='checked'] {
    border-color: var-get($theme, 'border-on-color');
    background: $checked-color;
}

[part~='thumb'] {
    border-radius: var-get($theme, 'border-radius-thumb');
    width: var(--thumb-size);
    height: var(--thumb-size);
    min-width: var(--thumb-size);
    background: var-get($theme, 'thumb-off-color');
}

[part~='thumb']:not([part~='checked']) {
    margin-inline-start: var(--thumb-offset);
}

[part~='thumb'][part~='checked'] {
    background: var-get($theme, 'thumb-on-color');
    margin-inline-start: calc(100% - var(--thumb-size) - var(--thumb-offset));
}

:host([disabled]),
:host(:disabled) {
    [part~='control'][part~='checked'] {
        border-color: transparent;
    }
}
