@use 'functions' as *;
@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

////
/// @group Utilities
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
////

/// Hides the element from the DOM.
/// @access public
/// @example scss - Sample usage
///   input[type="checkbox"] {
///     @include hide-default();
///   }
@mixin hide-default {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: none;
    clip: rect(0, 0, 0, 0);
    outline: 0;
    pointer-events: none;
    overflow: hidden;
    appearance: none;
}

/// Applies text-overflow ellipsis to e text element.
/// This won't work on display flex elements.
/// @access public
@mixin ellipsis() {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

/// Registers a keyframes animation in the global keyframes registry list.
/// @access public
/// @group animations
/// @param {String} $name - The name of the keyframes animation.
@mixin keyframes($name) {
    $keyframe: map.get($keyframes, $name);

    @if $keyframe == null {
        $keyframe: string.unique-id();
        $keyframes: map.merge($keyframes, (#{$name}: $keyframe)) !global;

        @at-root {
            @keyframes #{$name} {
                @content;
            }
        }
    }
}

/// Animates an element.
/// @access public
/// @group animations
/// @param {List} $animate - The list of animation properties.
/// @example scss - Animating an element
///  @include fade-in(); // include the 'fade-in' keyframes animation mixin
///
///  .bozo {
///     @include animation('fade-in' .3s ease-out);
///  }
@mixin animation($animate...) {
    $max: list.length($animate);
    $animations: '';
    @for $i from 1 through $max {
        $animations: #{$animations + list.nth($animate, $i)};
        @if $i < $max {
            $animations: #{$animations + ', '};
        }
    }
    animation: $animations;
}

/// Generates a CSS class name for a color from a
/// given name, variant, prefix and suffix
/// @access private
/// @param {string} $name - The main class name.
/// @param {string} $variant - An additional string to be attached to the main class name.
/// @param {string} $prefix - A prefix to be attached to the name and variant string.
/// @param {string} $prefix - A suffix to be attached to the name and variant string.
@mixin _gen-color-class($name, $variant, $prefix, $suffix) {
    $prefix: if($prefix, '#{$prefix}-', '');
    $suffix: if($suffix, '-#{$suffix}', '');

    .#{$prefix}#{meta.inspect($name)}-#{$variant}#{$suffix} {
        @content;
    }
}

// stylelint-disable max-nesting-depth
/// Generates CSS class names for all colors from
/// for a given property and color palette, with
/// optional prefix and suffix attached to the class name.
/// @access private
/// @param {string} $prop - The CSS property to assign the palette color to.
/// @param {string} $prefix - A prefix to be attached to the class name.
/// @param {string} $suffix - A suffix to be attached to the class name.
/// @param {Map} $palette [$default-palette] - The igx palette to use to generate css class names for.
/// @example scss Generate background classes with colors from the palette.
///   // Will generate class names like
///   // .my-primary-500-bg { ... };
///   @include _gen-color-classes(
///     $prop: 'background-color',
///     $prefix: 'my',
///     $suffix: 'bg'
///   );
/// @requires {mixin} gen-color-class
@mixin _gen-color-classes($palette, $prop, $prefix, $suffix) {
    @each $name, $color in map.remove($palette, '_meta') {
        @each $shade, $value in $color {
            @if meta.type-of($value) != 'map' {
                @include _gen-color-class($name, $shade, $prefix, $suffix) {
                    #{$prop}: var(--igc-#{meta.inspect($name)}-#{$shade});
                }
            }
        }
    }
}

/// Generates CSS variables for a given palette.
/// @access public
/// @param {Map} $palette [null] - The igx palette to use to generate CSS variables for.
/// @param {bool} $contrast [true] - Specify if contrast colors should be included.
///
/// @example scss Generate css variables for the `$default-palette`.
///    @include igx-palette-vars($default-palette);
///
@mixin palette($palette, $contrast: true) {
    $scope: if(is-root(), ':root', '&');
    $_meta: map.get($palette, '_meta');
    $theme: if($_meta, map.get($_meta, 'variant'), null);

    #{$scope} {
        @each $key, $value in $_meta {
            $_valid-color: meta.type-of($value == 'color');
            $_valid-key: not(string.index(#{$key}, 'variant'));

            @if $_valid-color and $_valid-key {
                --igc-#{$key}-h: #{math.round(color.hue($value))};
                --igc-#{$key}-s: #{math.round(color.saturation($value))};
                --igc-#{$key}-l: #{math.round(color.lightness($value))};
                --igc-#{$key}-a: #{color.alpha($value)};
            }
        }

        @each $name, $shades in map.remove($palette, '_meta') {
            @each $shade, $value in $shades {
                --igc-#{meta.inspect($name)}-#{$shade}: #{$value};
            }
        }
    }
}

// stylelint-enable max-nesting-depth

/// Generates CSS variables for a given elevations map.
/// @access public
/// @param {Map} $elevations - The igx elevations map to use to generate CSS variables for.
///
/// @example scss Generate CSS variables for elevations.
///    $elevations: igx-elevations(red, green, blue); // umbra, penumbra, ambient
///    @include igx-elevation-vars($elevations);
///
@mixin elevations($elevations) {
    $scope: if(is-root(), ':root', '&');

    #{$scope} {
        @each $level, $shadow in $elevations {
            --igc-elevation-#{$level}: #{$shadow};
        }
    }
}

/// Generates CSS class names for all colors from
/// for a given property and color palette, with
/// optional prefix and suffix attached to the class name.
/// @access public
/// @param {string} $prop - The CSS property to assign the palette color to.
/// @param {string} $prefix [igc] - A prefix to be attached to the class name.
/// @param {string} $suffix [null] - A suffix to be attached to the class name.
/// @param {Map} $palette [$default-palette] - The igx palette to use to generate css class names for.
/// @example scss Generate background classes with colors from the palette.
///   // Will generate class names like
///   // .igx-primary-500-bg { ... };
///   @include igx-color-classes(
///     $prop: 'background-color',
///     $suffix: 'bg'
///   );
/// @requires {mixin} _gen-color-classes
@mixin color-classes($palette, $prop, $prefix: 'igc', $suffix: null) {
    @include _gen-color-classes($palette, $prop, $prefix, $suffix);
}

/// Compiles the passed content to CSS only if
/// the global $direction variable is set to 'ltr'.
/// @example scss Include content only if $direction is set to ltr (default)
///    @include if-ltr {
///      margin-right: 8px;
///    }
@mixin if-ltr {
    $dir: if(meta.global-variable-exists('direction'), $direction, 'ltr');

    @if $dir != 'rtl' {
        @content;
    }
}

/// Compiles the passed content to CSS only if
/// the global $direction variable is set to 'rtl'.
/// @example scss Include content only if $direction is set to rtl
///    @include if-rtl {
///      margin-left: 8px;
///    }
@mixin if-rtl {
    $dir: if(meta.global-variable-exists('direction'), $direction, 'ltr');

    @if $dir == 'rtl' {
        @content;
    }
}

/// Truncates text at a specific number of lines
/// @param {number|string} $lines - The number of lines to show
/// @param {Boolean} $inline - Sets whether an element displays inline-box or box
/// @param {Boolean} $vertical - Sets whether an element lays out its contents horizontally or vertically
/// @example scss Truncates text after the fourth line
///    @include line-clamp(4, true, true);
@mixin line-clamp($lines, $inline, $vertical) {
    display: if($inline, -webkit-inline-box, -webkit-box);
    -webkit-line-clamp: if($lines, $lines, initial);
    -webkit-box-orient: if($vertical, vertical, initial);
    overflow: hidden;
}

/// @access private
@mixin icon-w-margin($margin, $left) {
    > * {
        margin-#{$left}: $margin;

        &:first-child {
            margin-#{$left}: 0;
        }
    }
}
