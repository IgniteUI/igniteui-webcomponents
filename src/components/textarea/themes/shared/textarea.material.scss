@use 'styles/utilities' as *;
@use '../light/themes' as *;
@use 'igniteui-theming/sass/animations/easings' as *;

$theme: $material;
$input-top-padding: rem(20px);
$input-bottom-padding: rem(6px);

:host {
    @include type-style('subtitle-1');

    --component-size: var(--ig-size, #{var-get($theme, 'default-size')});

    ::part(helper-text) {
        @include type-style('caption');

        color: var-get($theme, 'helper-text-color');
        grid-auto-rows: minmax(rem(18px), auto);
        margin-block-start: rem(4px);
        padding-inline: pad-inline(rem(14px), rem(16px), rem(18px));
    }
}

textarea {
    border: none;
    padding: 0;
    overflow: auto;
    margin-block-start: $input-top-padding;
    grid-area: 1 / 2 / span 1 / span 2;
    flex-grow: 1;
    position: relative;
    max-width: inherit;
    padding-inline: rem(4px);
    z-index: 1;
}

[part='label'] {
    position: absolute;
    transform-origin: top left;
    inset-block-start: calc($input-top-padding - #{rem(2px)});
    padding-inline-end: rem(4px);
    transition:
        transform 150ms cubic-bezier(.4, 0, .2, 1),
        color 150ms cubic-bezier(.4, 0, .2, 1),
        font-size 150ms cubic-bezier(.4, 0, .2, 1);
    will-change: transform, translate;
}

%label-filled {
    @include type-style('caption');

    translate: 0;
    inset-block-start: calc(#{$input-top-padding} / 4);
}

%label-outlined-filled {
    @include type-style('caption') {
        margin-block-end: 0;
    };

    display: inline-block;
    position: relative;
    inset-block: 0;
    translate: 0 calc(var(--textarea-label-position) * -1);
    padding-inline-end: 0;
}

:host(:not([outlined])) {
    [part~='container'] {
        overflow: hidden;
        border-start-start-radius: var-get($theme, 'box-border-radius');
        border-start-end-radius: var-get($theme, 'box-border-radius');
        background: var-get($theme, 'box-background');
        padding-inline-end: rem(1px);

        &::after {
            content: '';
            position: absolute;
            bottom: 0%;
            width: 100%;
            border-block-end: rem(1px) solid var-get($theme, 'idle-bottom-line-color');
            transition: all 0.25s $out-cubic;
        }

        textarea {
            margin-block-end: rem(2px);
        }
    }

    [part~='container']:not([part~='suffixed']) {
        textarea {
            grid-area: 1 / 2 / span 1 / span 3;
        }
    }

    [part~='placeholder'] [part='label'],
    [part~='filled'] [part='label'] {
        @extend %label-filled;
    }
}

:host(:not([outlined], [readonly]):hover) {
    [part~='container'] {
        background: var-get($theme, 'box-background-hover');

        &::after {
            border-block-end-width: rem(1px);
            border-block-end-color: var-get($theme, 'hover-bottom-line-color');
        }
    }
}

:host(:disabled:not([outlined])),
:host([disabled]:not([outlined])) {
    [part~='container'] {
        background: var-get($theme, 'box-disabled-background');

        &::after {
            border-block-end-color: var-get(
                $theme,
                'disabled-bottom-line-color'
            );
            border-block-end-style: dashed;
        }
    }
}

:host(:not(:disabled,[readonly]):state(ig-invalid)),
:host(:not([disabled],[readonly]):state(ig-invalid)) {
    [part~='container'] {
        &::after {
            border-block-end-color: var-get($theme, 'error-secondary-color');
        }
    }

    [part~='label'] {
        color: var-get($theme, 'error-secondary-color');
    }
}

:host(:not([readonly]):focus-within) {
    [part~='label'] {
        @extend %label-filled;
    }
}

:host(:focus-within) {
    [part~='label'] {
        color: var-get($theme, 'focused-secondary-color');
    }
}

:host(:not([outlined]):focus-within) {
    color: var-get($theme, 'input-prefix-color--focused');

    [part~='container'] {
        background: var-get($theme, 'box-background-focus');

        &::after {
            border-block-end-width: rem(2px);
            border-block-end-color: var-get(
                $theme,
                'focused-bottom-line-color'
            );
        }
    }
}

:host(:not([outlined], [readonly]):focus-within) {
    [part~='prefix'] {
        color: var-get($theme, 'input-prefix-color--focused');
        background: var-get($theme, 'input-prefix-background--focused');
    }

    [part~='suffix'] {
        color: var-get($theme, 'input-suffix-color--focused');
        background: var-get($theme, 'input-suffix-background--focused');
    }
}

:host(:not([outlined], [disabled])[readonly]) {
    [part~='container'] {
        background: var-get($theme, 'box-background-focus');
    }
}

:host(:not([outlined],[readonly]):state(ig-invalid):focus-within) {
    [part~='container'] {
        &::after {
            border-block-end-color: var-get($theme, 'error-secondary-color');
        }
    }
}

[part='start'],
[part='end'] {
    display: flex;
    align-items: center;
    min-width: pad(rem(10px), rem(12px), rem(14px));
    min-height: 100%;
    overflow: hidden;
}

[part='start'] {
    grid-area: 1 / 1;
}

[part='notch'] {
    display: flex;
    align-items: flex-start;
    width: auto;
    min-width: 0;
    height: 100%;
    position: relative;
    grid-area: 1 / 2;
    padding-inline: rem(4px);
}

[part='filler'] {
    grid-area: 1 / 3;
}

[part='end'] {
    grid-area: 1 / 4;
}

[part~='prefixed'] {
    [part~='prefix'] {
        padding-inline: pad-inline(rem(12px), rem(14px), rem(16px));
    }
}

[part~='suffixed'] {
    [part~='suffix'] {
        padding-inline: pad-inline(rem(12px), rem(14px), rem(16px));
    }
}

[part~='filled'] {
    color: var-get($theme, 'input-prefix-color--filled');
}

// Outlined Textarea
:host([outlined]) {
    --textarea-label-position: calc(50% + (#{rem(1px)}));

    align-items: initial;
    padding: 0;
    box-shadow: none;
    border-radius: var-get($theme, 'border-border-radius');
    background: var-get($theme, 'border-background');
    overflow: initial;

    [part~='container'] {
        grid-template-columns: auto auto 1fr auto;
        display: grid;
    }

    [part~='container']:not([part~='suffixed']) {
        textarea {
            grid-column: 2 / -1;
            max-width: calc(100% - #{rem(2px)});
        }
    }

    [part~='container'][part~='filled'],
    [part~='container'][part~='placeholder'] {
        [part='notch'] {
            border-block-start: rem(2px) solid transparent;
        }
    }

    [part~='placeholder'] [part='label'],
    [part~='filled'] [part='label'] {
        @extend %label-outlined-filled;
    }

    [part='start'] {
        width: auto;
        border: {
            color: var-get($theme, 'border-color');
            style: solid;
            inline: {
                start-width: rem(1px);
                end-width: 0;
            }
            block: {
                start-width: rem(1px);
                end-width: rem(1px);
            }
            start: {
                start-radius: var-get($theme, 'border-border-radius');
            }
            end: {
                start-radius: var-get($theme, 'border-border-radius');
            }
        }
    }

    [part='filler'] {
        border: {
            width: rem(1px);
            style: solid;
            color: var-get($theme, 'border-color');
            left: none;
            right: none;
        }
    }

    [part='notch'] {
        border-block: rem(1px) solid var-get($theme, 'border-color');
        padding: 0 rem(4px);

        &:empty {
            display: none;
        }
    }

    [part='end'] {
        display: flex;
        justify-content: flex-end;
        flex-grow: 1;
        height: 100%;
        grid-area: 1 / 4;
        border: {
            color: var-get($theme, 'border-color');
            style: solid;
            inline: {
                start-width: 0;
                end-width: rem(1px);
            }
            block: {
                start-width: rem(1px);
                end-width: rem(1px);
            }
            start: {
                end-radius: var-get($theme, 'border-border-radius');
            }
            end: {
                end-radius: var-get($theme, 'border-border-radius');
            }
        }
    }

    textarea {
        bottom: rem(2px);
    }
}

:host(:not([readonly], :focus-within)[outlined]:hover) {
    [part='notch'],
    [part='start'],
    [part='end'],
    [part='filler'] {
        border-color: var-get($theme, 'hover-border-color');
    }

    [part~='container'][part~='filled'],
    [part~='container'][part~='placeholder'] {
        [part='notch'] {
            border-block-start-color: transparent;
        }
    }
}

:host(:not([readonly])[outlined]:focus-within) {
    [part='label'] {
        @extend %label-outlined-filled;
    }

    [part='notch'] {
        border-block-start-color: transparent;
    }
}

:host([readonly][outlined]) {
    [part~='container'][part~='filled'],
    [part~='container'][part~='placeholder'] {
        [part='label'] {
            @extend %label-outlined-filled;
        }

        [part='notch'] {
            border-block-start-color: transparent;
        }
    }
}

:host([readonly][outlined]:focus-within) {
    [part='label'] {
        inset-block-start: calc($input-top-padding - #{rem(3px)});
    }

    [part='notch'] {
        border-block-start-color: var-get($theme, 'focused-border-color');
    }
}

:host([outlined]:focus-within) {
    [part='filler'],
    [part='notch'] {
        border-block-width: rem(2px);
    }

    [part='filler'] {
        border-block-color: var-get($theme, 'focused-border-color');
    }

    [part='notch'] {
        border-block-end-color: var-get($theme, 'focused-border-color');
    }

    [part='start'] {
        border: {
            color: var-get($theme, 'focused-border-color');
            inline: {
                start-width: rem(2px);
                end-width: 0;
            }
            block: {
                start-width: rem(2px);
                end-width: rem(2px);
            }
        }
    }

    [part='end'] {
        border: {
            color: var-get($theme, 'focused-border-color');
            inline: {
                start-width: 0;
                end-width: rem(2px);
            }
            block: {
                start-width: rem(2px);
                end-width: rem(2px);
            }
        }
    }

    [part~='prefix'] {
        margin-inline-start: rem(-1px);
    }

    [part~='suffix'] {
        margin-inline-end: rem(-1px);
    }
}

:host(:state(ig-invalid)[outlined]:not(:disabled,[readonly])),
:host(:state(ig-invalid)[outlined]:not(:disabled,[readonly]):focus-within),
:host(:state(ig-invalid)[outlined]:not([disabled],[readonly])),
:host(:state(ig-invalid)[outlined]:not([disabled],[readonly]):focus-within) {
    [part='start'],
    [part='filler'],
    [part='end'],
    [part='notch'] {
        border-color: var-get($theme, 'error-secondary-color');
    }
}

:host(:state(ig-invalid)[outlined]:not([disabled],[readonly]):focus-within),
:host(:state(ig-invalid)[outlined]:not([disabled],[readonly])) [part~='placeholder'] {
    [part='notch'] {
        border-block-start-color: transparent;
    }
}

:host(:disabled[outlined]),
:host([disabled][outlined]) {
    [part~='container'] {
        background: var-get($theme, 'border-disabled-background');
    }

    [part='start'],
    [part='filler'],
    [part='notch'],
    [part='end'] {
        border-color: var-get($theme, 'disabled-border-color');
    }
}
