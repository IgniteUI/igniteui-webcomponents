@use 'sass:map';
@use '../../../../styles/common/component';
@use '../../../../styles/utilities' as *;
@use '../../../../styles/themes/schemas/bootstrap/light' as *;

$input-schema: extend((name: 'ig-input'), map.get($light-bootstrap-schema, 'input-group'));
$combo-schema: extend((name: 'ig-combo'), map.get($light-bootstrap-schema, 'combo'));
$input-theme: digest-schema($input-schema);
$dropdown-schema: extend((name: 'ig-dropdown'), map.get($light-bootstrap-schema, 'drop-down'));
$dropdown-theme: digest-schema($dropdown-schema);
$theme: digest-schema($combo-schema);

:host {
    @include css-vars-from-theme($input-theme, 'ig-input');
    @include css-vars-from-theme($theme, 'ig-combo');
    @include css-vars-from-theme($dropdown-theme, 'ig-dropdown');
}

[part='helper-text'] {
    margin-top: rem(4px);
}

[part='list-wrapper'] {
    igc-input::part(input) {
        border-inline-end: 0;
    }

    igc-input::part(suffix) {
        background: transparent;
        border: none;
        border-radius: 0;
    }

    [part='search-input'] {
        [part~='case-icon'] {
            border-block-end: rem(1px) solid color(gray, 400);
            transition: border .15s ease-out;
        }

        &:focus,
        &:focus-within {
            [part~='case-icon'] {
                border-block-end: rem(1px) solid color(primary, 500);
            }
        }
    }
}

[part='empty'] {
    color: var-get($theme, 'empty-list-placeholder-color');
}

[part~='toggle-icon'] {
    background: var-get($theme, 'toggle-button-background');
    color: var-get($theme, 'toggle-button-foreground');

    igc-icon {
        color: inherit;
    }
}

[part='clear-icon'] {
    background: var-get($theme, 'clear-button-background');
    color: var-get($theme, 'clear-button-foreground');
    border-inline-end: rem(1px) solid var-get($input-theme, 'border-color');

    igc-icon {
        color: inherit;
    }
}

[part='case-icon active'] {
    color: color(primary, 500);
}

:host(:focus-within) {
    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-focus--border');
        color: var-get($theme, 'toggle-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }

    [part~='clear-icon'] {
        background: var-get($theme, 'clear-button-background-focus');
        color: var-get($theme, 'clear-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }
}

:host([invalid]) {
    ::slotted([slot='helper-text']) {
        color: var-get($input-theme, 'error-secondary-color');
    }
}

:host(:disabled),
:host([disabled]) {
    ::slotted([slot='prefix']),
    ::slotted([slot='suffix']),
    igc-input::part(label),
    igc-input::part(input)::placeholder,
    ::slotted([slot='helper-text']) {
        color: var-get($input-theme, 'disabled-text-color');
    }

    [part~='clear-icon'] {
        border-inline-end: rem(1px) solid var-get($input-theme, 'disabled-border-color');
        background: inherit;
        color: var-get($input-theme, 'disabled-text-color');

        igc-icon {
            color: inherit;
        }
    }

    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-disabled');
        color: var-get($theme, 'toggle-button-foreground-disabled');

        igc-icon {
            color: inherit;
        }
    }
}
