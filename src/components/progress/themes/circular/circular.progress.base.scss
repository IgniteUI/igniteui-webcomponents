@use 'styles/common/component';
@use 'styles/utilities' as *;
@use '../animations' as *;
@use '../vars' as *;

[part~='base'] {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-family: var(--ig-font-family), serif;
    position: relative;
}

[part~='label'] {
    display: flex;
    align-items: center;
    color: inherit;
    position: absolute;
    transform: translate(-50%, -50%);
    top: 50%;
    left: 50%;
    line-height: normal;
    font-weight: 600;
}

[part~='label'],
[part~='value'] {
    line-height: normal;
    font-weight: 600;
}

[part~='counter'] {
    animation: initial-counter var(--_transition-duration) ease-in-out;
    transition:
            --_progress-integer var(--_transition-duration) ease-in-out,
            --_progress-fraction var(--_transition-duration) ease-in-out;
    counter-reset:
            progress-integer var(--_progress-integer, 0)
            progress-fraction var(--_progress-fraction, 0);
}

[part~='counter']:not([part~='fraction'])::before {
    content: counter(progress-integer) '%';
}

[part~='counter'][part~='fraction']::before {
    content: counter(progress-integer) '.' counter(progress-fraction, decimal-leading-zero) '%';
}

[part~='svg'] {
    width: $diameter;
    height: $diameter;
    transform: rotate(-90deg);
    transform-origin: center;

    &:not([part~='indeterminate']) [part~='fill'] {
        animation: initial-dashoffset var(--_transition-duration) linear;
        stroke-dasharray: #{$circumference} #{$circumference};
        stroke-dashoffset: calc(#{$circumference} - var(--_progress-percentage) * #{$circumference});
    }
}

[part~='track'],
[part~='fill'] {
    width: 100%;
    height: 100%;
    fill: transparent;
    cx: calc(#{$diameter} / 2);
    cy: calc(#{$diameter} / 2);
    r: $radius;
    transform-origin: center;
}

[part~='track'] {
    stroke-width: var(--stroke-thickness);
}

[part~='fill'] {
    --_progress-percentage: calc(var(--_progress-whole, 0) / 100);

    stroke-dasharray: #{$circumference} #{$circumference};
    stroke-dashoffset: calc(#{$circumference} - var(--_progress-whole, 0) * #{$circumference});
    transition: stroke-dashoffset var(--_transition-duration) linear;
    stroke-width: calc(#{var(--stroke-thickness)} + rem(0.75px));
}

[part~='svg'][part~='indeterminate'] {
    transform-origin: 50% 50%;
    animation: 3s linear 0s infinite $animation-direction none running rotate-center;

    [part~='fill'] {
        stroke-dashoffset: calc(#{$circumference} * 2);
        animation: indeterminate-accordion 1.5s cubic-bezier(0, 0.085, 0.68, 0.53) $animation-direction infinite;
    }
}

:host(:dir(rtl)),
:host([dir='rtl']) {
    [part~='svg'][part~='indeterminate'] [part~='fill'] {
        animation-name: indeterminate-accordion-rtl;
    }

    [part~='indeterminate'] {
        animation-direction: $animation-direction-rtl;

        [part~='track'] {
            animation-direction: $animation-direction-rtl;
        }

        [part~='fill'] {
            stroke-dashoffset: calc(#{$circumference} + var(--_progress-percentage) * #{$circumference});
        }
    }

    [part~='svg'] {
        &:not([part~='indeterminate']) [part~='fill'] {
            animation: initial-dashoffset-rtl var(--_transition-duration) linear;
            stroke-dasharray: #{$circumference} #{$circumference};
            stroke-dashoffset: calc(#{$circumference} + var(--_progress-percentage) * #{$circumference});
        }
    }
}
