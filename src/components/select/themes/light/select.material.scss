@use 'sass:map';
@use '../../../../styles/common/component';
@use '../../../../styles/utilities' as *;
@use '../../../../styles/themes/schemas' as *;

$input-schema: extend((name: 'ig-input-group'), map.get($light-material-schema, 'input-group'));
$select-schema: extend((name: 'ig-select'), map.get($light-material-schema, 'select'));
$schema: map.merge($input-schema, $select-schema);
$theme: digest-schema($schema);
$active-color: var-get($theme, 'focused-border-color');
$error-color: var-get($theme, 'error-secondary-color');
$idle-border-width: rem(1px) !default;
$active-border-width: rem(2px) !default;

:host {
    @include css-vars($theme);
}

:host([outlined]:focus-within) {
    igc-input[readonly]:not([disabled])::part(start) {
        border: {
            color: $active-color;
            inline: {
                start-width: $active-border-width;
            };
            block: {
                start-width: $active-border-width;
                end-width: $active-border-width;
            }
        }
    }

    igc-input[readonly]:not([disabled])::part(notch) {
        border: {
            width: $active-border-width;
            color: $active-color;
            top: $idle-border-width solid transparent;
        }
    }

    igc-input[readonly]:not([disabled])::part(filler) {
        border: {
            width: $active-border-width;
            color: $active-color;
        }
    }

    igc-input[readonly]:not([disabled])::part(end) {
        border: {
            color: $active-color;
            inline: {
                end-width: $active-border-width;
            };
            block: {
                start-width: $active-border-width;
                end-width: $active-border-width;
            };
        }
    }

    igc-input[readonly]:not([disabled])::part(label) {
        color: $active-color;
    }
}

:host([outlined][invalid]:focus-within) {
    igc-input[readonly]:not([disabled])::part(start) {
        border: {
            color: $error-color;
            inline: {
                start-width: $active-border-width;
            };
            block: {
                start-width: $active-border-width;
                end-width: $active-border-width;
            }
        }
    }

    igc-input[readonly]:not([disabled])::part(notch) {
        border: {
            width: $active-border-width;
            color: $error-color;
            top: $idle-border-width solid transparent;
        }
    }

    igc-input[readonly]:not([disabled])::part(filler) {
        border: {
            width: $active-border-width;
            color: $error-color;
        }
    }

    igc-input[readonly]:not([disabled])::part(end) {
        border: {
            color: $error-color;
            inline: {
                end-width: $active-border-width;
            };
            block: {
                start-width: $active-border-width;
                end-width: $active-border-width;
            };
        }
    }

    igc-input[readonly]:not([disabled])::part(label) {
        color: $error-color;
    }
}

:host(:not([outlined]):focus-within) {
    igc-input::part(container) {
        background: var-get($theme, 'box-background-focus');
        border-bottom-color: var-get($theme, 'focused-bottom-line-color');
    }
}

:host(:focus-within) {
    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-focus');
        color: var-get($theme, 'toggle-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }
}

:host(:not([outlined])[invalid]:focus-within) {
    igc-input::part(container) {
        border-bottom-color: var-get($theme, 'error-secondary-color');
    }
}

[part~='toggle-icon'] {
    background: var-get($theme, 'toggle-button-background');
    color: var-get($theme, 'toggle-button-foreground');

    igc-icon {
        color: inherit;
    }
}

[part='helper-text'] {
    color: var-get($theme, 'helper-text-color');
    margin-top: rem(5px);
    padding-inline: pad-inline(rem(14px), rem(16px), rem(18px));
}


:host([invalid]) {
    [part='helper-text'] {
        color: var-get($theme, 'error-secondary-color');
    }
}

:host([disabled]) {
    // igc-input::part(input)::selection {
    //     background: transparent;
    // }

    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-disabled');
        color: var-get($theme, 'toggle-button-foreground-disabled');

        igc-icon {
            color: inherit;
        }
    }

    [part='helper-text'] {
        color: var-get($theme, 'disabled-text-color');
    }
}

