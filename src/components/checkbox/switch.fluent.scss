@use '../../styles/utilities' as utils;

@mixin theme() {
    igc-switch {
        --size: #{utils.rem(40px)};
        --thumb-size: #{utils.rem(12px)};
        --thumb-offset: calc(var(--thumb-size) / 2);
    }

    igc-switch::part(control) {
        width: var(--size);
        height: utils.rem(20px);
        box-shadow: inset 0 0 0 1px #{utils.color(gray, 500)};
        border-radius: utils.rem(10px);
        background: transparent;
    }

    igc-switch:hover::part(control) {
        box-shadow: inset 0 0 0 1px #{utils.color(gray, 800)};
    }

    igc-switch:hover::part(thumb) {
        background: #{utils.color(gray, 800)};
    }

    igc-switch[checked]::part(control) {
        background: #{utils.color(primary, 500)};
        box-shadow: inset 0 0 0 1px #{utils.color(primary, 500)};
    }

    igc-switch:focus-within::part(control) {
        box-shadow: inset 0 0 0 1px #{utils.color(gray, 800)};
    }

    igc-switch[checked]:focus-within::part(control) {
        background: utils.color(primary, 900);
        box-shadow: inset 0 0 0 1px #{utils.color(primary, 900)};
    }

    igc-switch:not([checked])[invalid]::part(control) {
        box-shadow: inset 0 0 0 1px #{utils.color(error, 500)};
    }

    igc-switch:not([checked])[invalid]::part(thumb) {
        background: utils.color(error, 500);
    }

    igc-switch[checked][invalid]::part(control) {
        background: utils.color(error, 500);
        box-shadow: inset 0 0 0 1px #{utils.color(error, 500)};
    }

    igc-switch:not([checked])[invalid]:hover::part(control),
    igc-switch:not([checked])[invalid]:focus-within::part(control) {
        box-shadow: inset 0 0 0 1px #{utils.color(error, 700)};
    }

    igc-switch:not([checked])[invalid]:hover::part(thumb),
    igc-switch:not([checked])[invalid]:focus-within::part(thumb) {
        background: utils.color(error, 700);
    }

    igc-switch[checked][invalid]:hover::part(control),
    igc-switch[checked][invalid]:focus-within::part(control) {
        box-shadow: inset 0 0 0 1px #{utils.color(error, 700)};
        background: utils.color(error, 700);
    }

    igc-switch[disabled]::part(control),
    igc-switch[disabled][invalid]::part(control) {
        box-shadow: inset 0 0 0 1px #{utils.color(gray, 400)};
    }

    igc-switch[checked][disabled]::part(control),
    igc-switch[checked][disabled][invalid]::part(control) {
        background: #{utils.color(gray, 400)};
    }

    igc-switch:not([checked])[disabled]::part(thumb) {
        background: #{utils.color(gray, 400)};
    }

    igc-switch::part(thumb) {
        width: var(--thumb-size);
        height: var(--thumb-size);
        min-width: var(--thumb-size);
        animation-name: thumb-off;
        margin-inline-start: var(--thumb-offset);
        background: #{utils.color(gray, 700)};
        box-shadow: none;

        &::after {
            display: none;
        }

        &:hover {
            box-shadow: none;
        }
    }

    igc-switch:focus-within::part(thumb),
    igc-switch:hover::part(thumb) {
        background: #{utils.color(gray, 800)};
    }

    igc-switch[checked]::part(thumb) {
        background: white;
        animation-name: thumb-on;
        margin-inline-start: calc(var(--size) - var(--thumb-size) - var(--thumb-offset));
    }
}
