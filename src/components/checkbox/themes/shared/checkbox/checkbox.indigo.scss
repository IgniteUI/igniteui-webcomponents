@use 'styles/utilities' as *;
@use '../../light/checkbox/themes' as *;

$theme: $indigo;
$fill-color: var-get($theme, 'fill-color');
$fill-color-hover: var-get($theme, 'fill-color-hover');
$empty-color: var-get($theme, 'empty-color');
$disabled-color: var-get($theme, 'disabled-color');
$disabled-indeterminate-color: var-get($theme, 'disabled-indeterminate-color');
$error-color: var-get($theme, 'error-color');
$error-color-hover: var-get($theme, 'error-color-hover');

:host {
    font-weight: 600;
}

[part~='label'] {
    @include type-style('body-1');
}

[part~='control'] {
    --size: #{rem(16px)};

    border-radius: var-get($theme, 'border-radius-ripple');
    width: var(--size, rem(16px));
    height: var(--size, rem(16px));
    min-width: var(--size, rem(16px));
    transition: background .15s ease-in;

    &::after {
        border-radius: var-get($theme, 'border-radius');
        border: rem(2px) solid $empty-color;
        transition: border-color .15s ease-in;
    }
}

[part='control checked']::after {
    border-color: $fill-color;
    background: $fill-color;
}

[part~='indicator'] {
    stroke: var-get($theme, 'tick-color');
    transform: scale(.8);
}

[part='indicator checked'] {
    transition-duration: .15s;
}

:host(:hover) {
    [part~='label'] {
        color: var-get($theme, 'label-color-hover');
    }

    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'empty-color-hover');
        }
    }

    [part='control checked'] {
        &::after {
            background: $fill-color-hover;
            border-color: $fill-color-hover;
        }
    }
}

:host(:focus-within) {
    [part~='control'] {
        box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color');
    }

    [part='control checked'] {
        box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-focused');
    }
}

:host([indeterminate]) {
    [part~='indicator'] {
        transform: rotate(45deg) translateX(-.125rem) scale(.8);
    }

    [part~='control'] {
        background: $fill-color;

        &::after {
            border-color: $fill-color;
        }
    }
}

:host([indeterminate]:hover) {
    [part~='control'] {
        background: $fill-color-hover;

        &::after {
            border-color: $fill-color-hover;
        }
    }
}

:host([indeterminate]:focus-within) {
    [part~='control'] {
        box-shadow: 0 0 0 rem(4px) color(secondary, 200, .87);
    }
}

:host(:not([disabled])[invalid]),
:host(:not(:disabled)[invalid]) {
    [part~='control'] {
        &::after {
            border-color: $error-color;
        }
    }

    [part='control checked'] {
        box-shadow: inset 0 0 0 rem(4px) $error-color;
        background: $error-color;

        &::after {
            background: $error-color;
        }
    }
}

:host(:hover:not([disabled])[invalid]),
:host(:hover:not(:disabled)[invalid]) {
    [part~='control'],
    [part='control checked'] {
        box-shadow: 0 0 0 rem(4px) $error-color-hover;
    }
}

:host(:focus-within:not([disabled])[invalid]),
:host(:focus-within:not(:disabled)[invalid]) {
    [part~='control'],
    [part='control checked'] {
        box-shadow: 0 0 0 rem(4px) $error-color-hover;
    }
}

:host(:not([disabled])[invalid][indeterminate]),
:host(:not(:disabled)[invalid][indeterminate]) {
    [part~='control'] {
        box-shadow: inset 0 0 0 rem(4px) $error-color;
        background: $error-color;
    }
}

:host(:hover:not([disabled])[invalid][indeterminate]),
:host(:hover:not(:disabled)[invalid][indeterminate]) {
    [part~='control'] {
        box-shadow: 0 0 0 rem(4px) $error-color-hover;
    }
}

:host(:focus-within:not([disabled])[invalid][indeterminate]),
:host(:focus-within:not(:disabled)[invalid][indeterminate]) {
    [part~='control'] {
        box-shadow: 0 0 0 rem(4px) $error-color-hover;
    }
}

:host([disabled]),
:host(:disabled),
:host([disabled][invalid]),
:host(:disabled[invalid]) {
    [part~='control'] {
        &::after {
            border-color: $disabled-color;
        }
    }

    [part='control checked']::after {
        background: $disabled-indeterminate-color;
        border-color: transparent;
    }
}

:host([disabled][indeterminate]),
:host(:disabled[indeterminate]) {
    [part~='control']::after {
        background: $disabled-indeterminate-color;
        border-color: $disabled-indeterminate-color;
    }
}
