@use 'sass:math';
@use 'styles/utilities' as *;
@use '../../light/switch/themes' as *;

$theme: $material;
$ripple-size: rem(40px);
$ripple-radius: calc(#{$ripple-size} / 2);

:host {
    --size: #{rem(36px)};
    --thumb-size: #{rem(20px)};
    --thumb-offset: #{rem(-1px)};
    --label-gap: #{rem(12px)};
}

[part~='base'] {
    &:hover {
        [part~='thumb'] {
            &::after {
                background: var-get($theme, 'track-off-color');
                opacity: .06;
            }
        }

        [part~='thumb'][part~='checked'] {
            &::after {
                background: var-get($theme, 'thumb-on-color');
                opacity: .06;
            }
        }

        [part~='control'] {
            border-color: var-get($theme, 'border-hover-color');
        }

        [part~='control'][part~='checked'] {
            border-color: var-get($theme, 'border-on-hover-color');
        }
    }

    &:focus-visible,
    [part='control focused'] {
        [part~='thumb'] {
            &::after {
                background: var-get($theme, 'track-off-color');
                opacity: .12;
            }
        }
    }

    &:focus-visible,
    [part='control checked focused'] {
        [part~='thumb'][part~='checked'] {
            &::after {
                background: var-get($theme, 'thumb-on-color');
                opacity: .12;
            }
        }
    }
}

[part~='control'] {
    border-radius: var-get($theme, 'border-radius-track');
    width: var(--size);
    height: rem(14px);
    background: var-get($theme, 'track-off-color');
    border: rem(1px) solid var-get($theme, 'border-color');
    z-index: 1;
}

[part~='control'][part~='checked'] {
    background: var-get($theme, 'track-on-color');
    border-color: var-get($theme, 'border-on-color');
}

[part~='thumb'] {
    border-radius: var-get($theme, 'border-radius-thumb');
    animation-name: thumb-off;
    width: var(--thumb-size);
    height: var(--thumb-size);
    min-width: var(--thumb-size);
    background: var-get($theme, 'thumb-off-color');
    box-shadow: var-get($theme, 'resting-elevation');
    margin-inline-start: var(--thumb-offset);

    &::after {
        border-radius: var-get($theme, 'border-radius-ripple');
        position: absolute;
        content: '';
        inset-block-start: calc(50% - #{math.div($ripple-size, 2)});
        inset-inline-start: calc(50% - #{math.div($ripple-size, 2)});
        width: $ripple-size;
        height: $ripple-size;
        overflow: hidden;
        z-index: -1;
    }
}

[part~='thumb'][part~='checked'] {
    background: var-get($theme, 'thumb-on-color');
    margin-inline-start: calc(var(--size) - var(--thumb-size) - var(--thumb-offset));
    animation-name: thumb-on;
    animation-duration: .2s;
    animation-fill-mode: forwards;
}

:host([invalid]) {
    [part~='control'] {
        border-color: var-get($theme, 'track-error-color');
        background: var-get($theme, 'track-error-color');
    }

    [part~='thumb'] {
        background: var-get($theme, 'error-color');
    }

    [part~='thumb'][part~='checked'] {
        background: var-get($theme, 'thumb-on-error-color');
    }

    [part~='thumb'][part~='focused'] {
        &::after {
            background: var-get($theme, 'error-color-hover');
        }
    }

    &:hover {
        [part~='thumb'] {
            &::after {
                background: var-get($theme, 'error-color-hover');
            }
        }
    }
}

:host(:not([disabled])[invalid]),
:host(:not(:disabled)[invalid]) {
    [part~='control'] {
        background: var-get($theme, 'track-error-color');
    }
}
