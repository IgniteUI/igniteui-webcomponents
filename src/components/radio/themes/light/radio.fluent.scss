@use '../../../../styles/utilities' as utils;

$hover-color: var(--hover-color, utils.color(gray, 700)) !default;
$checked-color: var(--checked-color, utils.color(primary, 500)) !default;
$checked-hover-color: var(--checked-hover-color, utils.color(primary, 800)) !default;
$invalid-hover-color: var(--invalid-hover-color, utils.color(error, 700)) !default;
$disabled-color: var(--disabled-color, utils.color(gray, 400)) !default;
$disabled-label-color: var(--disabled-label-color, utils.color(gray, 500)) !default;

:host [part~='base'] {
    transition-duration: .1s;
    gap: utils.rem(6px);
}

:host [part~='control'] {
    width: var(--size, utils.rem(20px));
    height: var(--size, utils.rem(20px));
    min-width: var(--size, utils.rem(20px));
    background: transparent;
    transition: none;

    &::before,
    &::after {
        transition-duration: .1s;
    }

    &::before {
        transform: translate(-50%, -50%) scale(.5);
    }

    &::after {
        border: calc(var(--size, 20px) / 20) solid utils.color(gray, 900);
    }
}

:host [part~='label'] {
    @include utils.type-style('body-2');
}

:host(:hover) {
    [part='control checked'] {
        &::after {
            border-color: $checked-hover-color;
        }

        &::before {
            background: $checked-hover-color;
        }
    }
}

:host(:hover),
:host(:focus-within) {
    [part='control'] {
        &::before {
            background: $hover-color;
        }
    }
}

:host [part='control checked'] {
    &::before {
        background: $checked-color;
    }

    &::after {
        border-color: $checked-color;
    }
}

:host(:not([disabled])[invalid]) {
    [part='control checked'] {
        &::before {
            background: utils.color(error, 500);
        }
    }

    [part~='control'] {
        &::after {
            border-color: utils.color(error, 500);
        }
    }
}

:host(:not([disabled])[invalid]:hover) {
    [part='control checked'] {
        &::after {
            border-color: $invalid-hover-color;
        }

        &::before {
            background: $invalid-hover-color;
        }
    }
}

:host(:not([disabled])[invalid]:hover),
:host(:not([disabled])[invalid]:focus-within) {
    [part='control'] {
        &::after {
            border-color: utils.color(error, 500);
        }

        &::before {
            background: utils.color(error, 500);
        }
    }
}

:host([disabled]) {
    [part~='label'] {
        color: $disabled-label-color;
    }

    [part~='control'] {
        &::after {
            border-color: $disabled-color;
        }
    }

    [part='control checked'] {
        &::before {
            background: $disabled-color;
        }
    }
}

[part~='focused'] {
    position: relative;

    $focus-outline-offset-top: utils.rem(2px);
    $focus-outline-offset-left: utils.rem(2px);

    &::after {
        content: '';
        position: absolute;
        top: -$focus-outline-offset-top;
        left: -$focus-outline-offset-left;
        box-shadow: 0 0 0 1px utils.color(gray, 700);
        width: calc(100% + (#{$focus-outline-offset-left} * 2));
        height: calc(100% + (#{$focus-outline-offset-top} * 2));
    }
}
