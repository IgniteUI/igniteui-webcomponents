@use '../shared' as *;
@use '../vars' as *;
@use 'styles/common/component';
@use 'styles/utilities' as *;
@use '../light-themes' as *;

$theme: $material;

:host {
    @include css-vars-from-theme($theme, 'ig-linear-bar');
    @extend %host !optional;

    display: flex;
    position: relative;
    width: 100%;
    flex-direction: column;
    flex: 1 1 100%;

    --track-size: #{rem(4px)};
    --linear-animation-duration: 2000ms;
}

:host([dir='rtl'][indeterminate]) {
    [part~='track'] {
        transform: rotateY(180deg);
    }
}

[part~='label'] {
    @extend %label !optional;
}

[part~='track'] {
    border-radius: var-get($theme, 'track-border-radius');
    position: relative;
    width: inherit;
    height: var(--track-size);
    background: $track-color;
    overflow: hidden;
    z-index: 0;
}

[part~='fill'] {
    transition: width var(--duration) linear, background-color var(--duration) linear;
    position: relative;
    height: inherit;
}

[part~='indeterminate'],
[part~='indeterminate secondary'] {
    width: 100% !important;
    height: inherit;
    position: absolute;
    background: transparent;

    &::after {
        content: '';
        position: absolute;
        top: 0;
        inset-inline-start: 0;
        width: inherit;
        height: inherit;
        backface-visibility: hidden;
    }
}

[part~='indeterminate']:not([part~='secondary']) {
    transform: scale3d(0, 1, 1);
    animation: indeterminate-primary var(--linear-animation-duration) infinite linear;
    left: -145.1666%;

    &::after {
        animation: indeterminate-primary-scale var(--linear-animation-duration) infinite linear;
    }
}

[part~='secondary'] {
    animation: indeterminate-secondary var(--linear-animation-duration) infinite linear;
    left: -54.8888%;

    &::after {
        animation: indeterminate-secondary-scale var(--linear-animation-duration) infinite linear;
        width: 100%;
        height: inherit;
    }
}

[part~='value'] {
    margin: 0;
    color: $text-color;
    font-size: em(14px);
    font-weight: 600;
}

// Colors
[part~='primary']:not([part~='indeterminate']) {
    background-color: $primary-color;
}

[part~='primary'] {
    &::after {
        background-color: $primary-color;
    }
}

[part~='striped'][part~='primary']:not([part~='indeterminate']) {
    width: 100%;
    height: 100%;

    @include stripe-colors($primary-color, $stripe-grays, $stripe-size, -45deg);
}

[part~='striped'][part~='primary'] {
    &::after {
        @include stripe-colors($primary-color, $stripe-grays, $stripe-size, -45deg);
    }
}

[part~='danger']:not([part~='indeterminate']) {
    background-color: $danger-color;
}

[part~='danger'] {
    &::after {
        background-color: $danger-color;
    }
}

[part~='striped'][part~='danger']:not([part~='indeterminate']) {
    @include stripe-colors($danger-color, $stripe-grays, $stripe-size, -45deg);
}

[part~='striped'][part~='danger'] {
    &::after {
        @include stripe-colors($danger-color, $stripe-grays, $stripe-size, -45deg);
    }
}

[part~='warning']:not([part~='indeterminate']) {
    background-color: $warning-color;
}

[part~='warning'] {
    &::after {
        background-color: $warning-color;
    }
}

[part~='striped'][part~='warning']:not([part~='indeterminate']) {
    @include stripe-colors($warning-color, $stripe-grays, $stripe-size, -45deg);
}

[part~='striped'][part~='warning'] {
    &::after {
        @include stripe-colors($warning-color, $stripe-grays, $stripe-size, -45deg);
    }
}

[part~='info']:not([part~='indeterminate']) {
    background-color: $info-color;
}

[part~='info'] {
    &::after {
        background-color: $info-color;
    }
}

[part~='striped'][part~='info']:not([part~='indeterminate']) {
    @include stripe-colors($info-color, $stripe-grays, $stripe-size, -45deg);
}

[part~='striped'][part~='info'] {
    &::after {
        @include stripe-colors($info-color, $stripe-grays, $stripe-size, -45deg);
    }
}

[part~='success']:not([part~='indeterminate']) {
    background-color: $success-color;
}

[part~='success'] {
    &::after {
        background-color: $success-color;
    }
}

[part~='striped'][part~='success']:not([part~='indeterminate']) {
    @include stripe-colors($success-color, $stripe-grays, $stripe-size, -45deg);
}

[part~='striped'][part~='success'] {
    &::after {
        @include stripe-colors($success-color, $stripe-grays, $stripe-size, -45deg);
    }
}

// Label Positions
:host([label-align='top']),
:host([label-align='top-start']),
:host([label-align='top-end']) {
    [part~='label'] {
        order: -1;
    }
}

:host([label-align='top-start']),
:host([label-align='bottom-start']),
:host([label-align='start']) {
    [part~='label'] {
        align-self: flex-start;
    }
}

:host([label-align='bottom-end']),
:host([label-align='top-end']),
:host([label-align='end']) {
    [part~='label'] {
        align-self: flex-end;
    }
}

:host([label-align='top']),
:host([label-align='bottom']) {
    [part~='label'] {
        align-self: center;
    }
}

[part~='hidden'] {
    display: none;
}
