@use 'styles/utilities' as *;
@use '../light/themes' as *;

$theme: $material;

:host {
    ::part(helper-text) {
        @include type-style('caption');

        margin-block-start: rem(8px);
        grid-auto-rows: minmax(rem(18px), auto);
    }
}

[part~='ripple'] {
    border-radius: var(--size);
    display: block;
    position: absolute;
    top: calc(50% - 1.25rem);
    width: calc(var(--size) * 2);
    height: calc(var(--size) * 2);
    min-width: calc(var(--size) * 2);
    overflow: hidden;
    pointer-events: none;
    filter: opacity(1);
}

[part~='base'] {
    gap: rem(2px);

    &:hover {
        [part~='ripple'] {
            background: var-get($theme, 'empty-color');
            opacity: .06;
        }

        [part='ripple checked'] {
            background: var-get($theme, 'fill-color');
            opacity: .06;
        }
    }

    &:focus-visible,
    &[part~='focused'] {
        [part='ripple'] {
            background: var-get($theme, 'empty-color');
            opacity: .12;
        }

        [part='ripple checked'] {
            background: var-get($theme, 'fill-color');
            opacity: .12;
        }
    }
}

[part~='control'] {
    border-radius: var(--size);
    position: relative;

    &::before,
    &::after {
        border-radius: calc(var(--size) / 2);
    }

    &::after {
        border: calc(var(--size) / 10) solid var-get($theme, 'empty-color');
    }
}

[part='control checked'] {
    &::before {
        border-color: var-get($theme, 'fill-color');
        background: var-get($theme, 'fill-color');
    }

    &::after {
        border-color: var-get($theme, 'fill-color');
    }
}

:host(:not([disabled])[invalid]) {
    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'error-color');
        }
    }

    [part='control checked'] {
        &::before {
            background: var-get($theme, 'error-color');
        }
    }

    [part~='base'] {
        &:hover  {
            [part~='ripple'] {
                background: var-get($theme, 'error-color');
            }
        }

        &:focus-visible,
        &[part~='focused'] {
            [part~='ripple'] {
                background: var-get($theme, 'error-color');
            }
        }
    }
}

:host([disabled]),
:host(:disabled) {
    [part~='control'] {
        &::after {
            border-color: var-get($theme, 'disabled-color');
        }
    }

    [part='control checked'] {
        &::before {
            background: var-get($theme, 'disabled-color');
            border-color: var-get($theme, 'disabled-color');
        }
    }
}
