@use 'styles/common/component';
@use 'styles/utilities' as *;

:host {
    align-items: flex-start;
}

[part~='header-container'],
[part~='header'] {
    width: var(--header-width-vertical, auto);

    &::before {
        content: '';
        width: auto;
        flex: 1;
        border-block-start-width: var(--separator-size);
        height: var(--separator-size);
        position: relative;
    }
}

[part~='header-container'] {
    display: flex;
    pointer-events: none;
    position: relative;
    justify-content: center;

    // Reset the context so that is possible to set background on the whole stepper
    z-index: 0;

    [part~='header'] {
        pointer-events: all;
        align-items: center;
    }

    [part='indicator'],
    [part='title'],
    [part='subtitle'] {
        pointer-events: none;
    }

    &::before {
        min-width: var(--separator-min-width);
        display: var(--hide-horizontal-separator, var(--horizontal-separator-display--first-of-type));
    }
}

[part~='header'] {
    display: flex;
    align-items: var(--align-items, flex-start);
    grid-row: var(--header-bottom, 1);
    position: relative;
    overflow: hidden;
    padding: var(--header-padding);
    justify-content: flex-start;
    gap: var(--header-gap);
    z-index: var(--vertical-header-z-index);

    &::before,
    &::after {
        content: '';
        flex: 1;
        border-block-start-width: var(--separator-size);
        height: var(--separator-size);
        min-width: var(--separator-min-width--header);
        width: calc(50% - (var(--indicator-size) / 2) - var(--header-padding));
        position: absolute;
        z-index: -1;
    }

    &::before {
        inset-inline-start: 0;
        /* stylelint-disable */
        display: var(--hide-horizontal-separator, var(--separator-disply-not-full, var(--horizontal-separator-display--first-of-type)));
        /* stylelint-enable */
    }

    &::after {
        inset-inline-end: 0;
        /* stylelint-disable */
        display: var(--hide-horizontal-separator, var(--separator-disply-not-full, var(--horizontal-separator-display--last-of-type)));
        /* stylelint-enable */
    }

    &:focus,
    &:hover {
        cursor: pointer;
        outline: none;
    }

    &:hover {
        &::before,
        &::after {
            visibility: var(--header-separator-visibility--hover);
        }
    }

    &:focus,
    &:focus-within,
    &:active {
        &::before,
        &::after {
            visibility: var(--header-separator-visibility--hover);
        }
    }
}

[part~='body'] {
    display: block;
    grid-row-start: var(--body-top, 2);
    grid-column: 1 / span var(--steps-count);
    padding-inline-start: calc(var(--body-indent--vertical) / 2);
    z-index: 1;
    position: relative;
    overflow: hidden;

    // Thous two lines here are on purpose, they make sure that step body content
    // does not get involved in grid width calculation. They fix a very weird bug.
    // https://stackoverflow.com/questions/73856035/css-grid-columns-changing-size-with-long-content/73858982#73858982
    width: 0;
    height: var(--vertical-body-height, auto);
    min-width: 100%;

    &::before {
        display: var(--hide-last-separator, var(--hide-first-separator, var(--vertical-separator-visibility)));
        content: '';
        position: absolute;
        inset-inline-start: calc(var(--body-indent--vertical) / 2 - (var(--separator-size) / 2));
        height: 100%;
        inset-block-start: 0 !important;
        border-inline-start-style: var(--separator-type);
        border-inline-start-width: var(--separator-size);
    }
}

[part='content'] {
    display: block;
    height: auto;
    overflow: auto;
    opacity: 0;

    > slot {
        display: block;
        padding-inline: var(--horizontal-body-padding, #{calc(var(--body-indent--vertical) / 2)}) var(--horizontal-body-padding, var(--vertical-body-padding));
        padding-block: var(--horizontal-body-padding, var(--vertical-body-padding)) var(--horizontal-body-padding, var(--vertical-body-padding));
    }
}

[part~='top'] {
    align-items: var(--step-not-full-header-aligmnet, flex-end);

    &::before,
    &::after {
        inset-block-end: var(--step-separator-position);
    }

    [part~='header'] {
        align-items: var(--align-items, flex-start);
        flex-direction: column-reverse;

        &::before,
        &::after {
            inset-block-end: var(--step-separator-position);
        }
    }
}

[part~='bottom'] {
    align-items: var(--step-not-full-header-aligmnet, start);

    &::before,
    &::after {
        inset-block-start: var(--step-separator-position);
    }

    [part~='header'] {
        align-items: var(--align-items, flex-start);
        flex-direction: column;

        &::before,
        &::after {
            inset-block-start: var(--step-separator-position);
        }
    }
}

[part~='top'],
[part~='bottom'] {
    [part~='text'] {
        width: 100%;
    }
}

[part~='start'] {
    --align-text: end;

    [part='text'] {
        order: -1;
    }
}

[part~='end'] {
    --align-text: start;
}

[part~='start'],
[part~='end'] {
    align-items: center;

    [part~='text'] {
        overflow: hidden;
    }

    [part~='header'] {
        &::before,
        &::after {
            display: none;
        }
    }
}

[part~='indicator'] {
    @include type-style('caption');

    width: var(--indicator-size);
    min-width: var(--indicator-size);
    height: var(--indicator-size);
    position: relative;
}

[part~='indicator'],
::slotted([slot='indicator']) {
    display: flex;
    align-items: center;
    justify-content: center;
}

::slotted([slot='indicator']) {
    --diameter: calc(var(--indicator-size) - #{rem(2px)});
    --ig-icon-size: #{rem(18px)};
}

[part~='text'] {
    text-align: var(--align-text, initial);
    min-width: var(--indicator-size);
}

[part~='subtitle'],
[part~='title'] {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

[part~='title'] {
    @include type-style('body-2');
}

[part~='subtitle'] {
    @include type-style('caption');
}

[part~='empty'] {
    display: none;
}

:host([active]) {
    [part~='body'] {
        height: 100%;
    }

    [part~='body bottom'] {
        &::before {
            inset-block-start: 0;
        }
    }

    [part='content'] {
        pointer-events: all;
        opacity: 1;
    }
}

[part~='disabled'] {
    [part='header'] {
        cursor: default;
    }
}
