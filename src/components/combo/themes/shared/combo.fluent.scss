@use 'styles/utilities' as *;
@use '../light/themes' as *;
@use 'components/dropdown/themes/light/themes' as dropdown-theme;
@use 'components/input/themes/light/themes' as input-theme;

$theme: $fluent;
$dropdown-theme: dropdown-theme.$fluent;
$input-theme: input-theme.$fluent;

:host {
    --component-size: var(--ig-size, #{var-get($theme, 'default-size')});
    --combo-size: var(--component-size);

    ::part(helper-text) {
        @include type-style('caption');

        margin-block-start: rem(5px);
        grid-auto-rows: minmax(rem(18px), auto);
    }
}

[part='filter-input'] {
    padding: pad(rem(2px), rem(4px), rem(8px));
}

[part='list-wrapper'] {
    background: var-get($dropdown-theme, 'background-color');
    border-radius: var-get($dropdown-theme, 'border-radius');

    igc-input::part(container) {
        background: transparent;
        border-radius: 0;
        border-inline: 0;
        border-block-start: 0;

        &::before {
            inset-inline-start: 0;
            width: calc(100% - var(--input-border-size));

            // The shadow color is set by the color: prop set on the input-group [part=container]::before element
            // Here we only change the shadow to look like border bottom
            box-shadow: inset 0 calc(var(--input-border-size) * -1) 0 0;
            border-radius: 0;
        }
    }

    igc-input:focus-within::part(container) {
        &::before {
            // The shadow color is set by the color: prop set on the input-group [part=container]::before element
            // Here we only change the shadow to look like border bottom
            box-shadow: inset 0 calc((var(--input-border-size) + #{rem(1px)}) * -1) 0 0;
        }
    }

    igc-input::part(start) {
        display: none;
    }

    igc-input::part(input) {
        border-radius: 0;
        padding: 0;
        border-inline-start: 0;
        border-inline-end-color: transparent;
        border-block-start: 0;
        box-shadow: none;
        height: var(--size);

        &::selection {
            background: color(primary, 100);
        }
    }

    igc-input::part(suffix) {
        background: transparent;
    }
}

[part='empty'] {
    color: var-get($theme, 'empty-list-placeholder-color');
}

:host(:focus-within) {
    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-focus');
        color: var-get($theme, 'toggle-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }

    [part~='clear-icon'] {
        background: var-get($theme, 'clear-button-background-focus');
        color: var-get($theme, 'clear-button-foreground-focus');

        igc-icon {
            color: inherit;
        }
    }
}

:host([invalid]) {
    igc-input[readonly]:not([disabled])::part(container) {
        &::before {
            box-shadow: inset 0 0 0 var(--input-border-size) var-get($theme, 'error-secondary-color');
        }
    }

    igc-input[readonly]:not([disabled]):focus-within::part(container) {
        &::before {
            box-shadow: inset 0 0 0 calc((var(--input-border-size) + #{rem(1px)}))  var-get($input-theme, 'error-secondary-color');
        }
    }
}

:host(:disabled),
:host([disabled]) {
    ::slotted([slot='prefix']),
    ::slotted([slot='suffix']),
    igc-input::part(label),
    igc-input::part(input)::placeholder {
        color: var-get($theme, 'disabled-text-color');
    }

    [part~='clear-icon'] {
        background: inherit;
        color: var-get($theme, 'disabled-text-color');

        igc-icon {
            color: inherit;
        }
    }

    [part~='toggle-icon'] {
        background: var-get($theme, 'toggle-button-background-disabled');
        color: var-get($theme, 'toggle-button-foreground-disabled');

        igc-icon {
            color: inherit;
        }
    }
}
